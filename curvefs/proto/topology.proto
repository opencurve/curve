/*
 *  Copyright (c) 2021 NetEase Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

syntax="proto2";
package curvefs.mds.topology;
option cc_generic_services = true;

enum OnlineState {
    ONLINE = 0;
    OFFLINE = 1;
    UNSTABLE = 2;
}

// etcd struct defination
message ClusterInfoData {
    required string clusterId = 1;
}

message PoolData {
    required uint32 PoolId = 1;
    required string PoolName = 2;
    required uint64 createTime = 3;
    required string redundanceAndPlacementPolicy = 4;
    required bool availFlag = 5;
}

message ZoneData {
    required uint32 zoneId = 1;
    required string zoneName = 2;
    required uint32 PoolId = 3;
}

message ServerData {
    required uint32 serverId = 1;
    required string hostName = 2;
    required string internalHostIP = 3;
    required uint32 internalPort = 4;
    required string externalHostIP = 5;
    required uint32 externalPort = 6;
    required uint32 zoneId = 7;
    required uint32 PoolId = 8;
}

message MetaServerData {
    required uint32 MetaServerId = 1;
    required string hostName = 2;
    required string token = 3;
    required string internalHostIP = 4;
    required uint32 internalPort = 5;
    required string externalHostIP = 6;
    required uint32 externalPort = 7;
    required uint32 serverId = 8;
    required OnlineState onlineState = 9;
}

message CopysetData {
    required uint32 copysetId = 1;
    required uint32 PoolId = 2;
    required uint64 epoch = 3;
    repeated uint32 MetaServerIds = 4;
    required uint32 PartitionNumber = 5;
    optional bool availFlag = 6;
}

// rpc struct defination

message MetaServerInfo {
    required uint32 MetaServerID = 1;
    required string hostname = 2;
    required string hostIp = 3;
    required uint32 port = 4;
    required string externalIp = 5;
    required uint32 externalPort = 6;
    required OnlineState onlineState = 7;
}

// MetaServer message
message MetaServerRegistRequest {
    required string hostName = 1;
    required string hostIp = 2;
    required uint32 port = 3;
    required string externalIp = 4;
    required uint32 externalPort = 5;
};

message MetaServerRegistResponse {
    required sint32 statusCode = 1;
    optional uint32 MetaServerID = 2;
    optional string token = 3;
};

message ListMetaServerRequest {
    required uint32 serverID = 1;
}

message ListMetaServerResponse {
    required sint32 statusCode = 1;
    repeated MetaServerInfo MetaServerInfos = 2;
}

message GetMetaServerInfoRequest {
    //use either MetaServerID  or  hostIp&port to query MetaServer
    optional uint32 MetaServerID = 1;
    optional string hostIp = 2;
    optional uint32 port = 3;
}

message GetMetaServerInfoResponse {
    required sint32 statusCode = 1;
    optional MetaServerInfo MetaServerInfo = 2;
}

message DeleteMetaServerRequest {
    required uint32 MetaServerID = 1;
}

message DeleteMetaServerResponse {
    required sint32 statusCode = 1;
}

// server message
message ServerInfo {
    required uint32 serverID = 1;
    required string hostName = 2;
    required string internalIp = 3;
    required uint32 internalPort = 4;
    required string externalIp = 5;
    required uint32 externalPort = 6;
    required uint32 zoneID = 7;
    required string zoneName = 8;
    required uint32 PoolID = 9;
    required string PoolName = 10;
}

message ServerRegistRequest {
    required string hostName = 1;
    required string internalIp = 2;
    optional uint32 internalPort = 3;
    required string externalIp = 4;
    optional uint32 externalPort = 5;
    required string zoneName = 6;
    required string PoolName = 7;
}

message ServerRegistResponse {
    required sint32 statusCode = 1;
    optional uint32 serverID = 2;
}

message GetServerRequest {
    // use either serverID or hostName or hostIp(internalIP or externalIp) to getServer
    optional uint32 serverID = 1;
    optional string hostName = 2;
    optional string hostIp = 3;
    optional uint32 port = 4;
}

message GetServerResponse {
    required sint32 statusCode = 1;
    optional ServerInfo serverInfo = 2;
}

message DeleteServerRequest {
    required uint32 serverID = 1;
}

message DeleteServerResponse {
    required sint32 statusCode = 1;
}

message ListZoneServerRequest {
    //user either zoneID  or zoneName&PoolName to
    //List Servers under the zone
    optional uint32 zoneID = 1;
    optional string zoneName = 2;
    optional string poolName = 3;
}

message ListZoneServerResponse {
    required sint32 statusCode = 1;
    repeated ServerInfo serverInfo = 2;
}

// zone message
message ZoneInfo {
    required uint32 zoneID  = 1;
    required string zoneName = 2;
    required uint32 PoolID = 3;
    required string PoolName = 4;
}

message CreateZoneRequest {
    required string zoneName  = 1;
    required string PoolName = 2;
}

message CreateZoneResponse {
    required sint32 statusCode = 1;
    optional ZoneInfo zoneInfo = 2;
}

message DeleteZoneRequest {
    required uint32 zoneID = 1;
}

message DeleteZoneResponse {
    required sint32 statusCode = 1;
}

message GetZoneRequest {
    required uint32 zoneID = 1;
}

message GetZoneResponse {
    required sint32 statusCode = 1;
    optional ZoneInfo zoneInfo = 2;
}

message ListPoolZoneRequest {
    required uint32 poolID = 1;
}

message ListPoolZoneResponse {
    required sint32 statusCode = 1;
    repeated ZoneInfo zones = 2;
}

// pool message
message PoolInfo {
    required uint32 PoolID = 1;
    required string PoolName = 2;
    required uint64 createTime = 3;
    required bytes redundanceAndPlaceMentPolicy = 4;
}

message CreatePoolRequest {
    required string PoolName = 1;
    required bytes redundanceAndPlaceMentPolicy = 2;
}

message CreatePoolResponse {
    required sint32 statusCode = 1;
    optional PoolInfo PoolInfo = 2;
}

message  DeletePoolRequest {
    required uint32 PoolID = 1;
}

message DeletePoolResponse {
    required sint32 statusCode = 1;
}

message GetPoolRequest {
    required uint32 PoolID = 1;
}

message GetPoolResponse {
    required sint32 statusCode = 1;
    optional PoolInfo PoolInfo = 2;
}

message ListPoolRequest {
}

message ListPoolResponse {
    required sint32 statusCode = 1;
    repeated PoolInfo PoolInfos = 2;
}

// for client interface
message GetMetaServerListInCopySetsRequest {
    required uint32 PoolId = 1;
    repeated uint32 copysetId = 2;
}

message MetaServerLocation {
    required uint32 MetaServerID = 1;
    required string hostIp = 2;
    required uint32 port = 3;
    optional string externalIp = 4;
}

message CopySetServerInfo {
    required uint32 copysetId = 1;
    repeated MetaServerLocation csLocs = 2;
}

message GetMetaServerListInCopySetsResponse {
    required sint32 statusCode = 1;
    repeated CopySetServerInfo csInfo = 2;
}

service TopologyService {
    rpc RegistMetaServer(MetaServerRegistRequest)       returns (MetaServerRegistResponse);
    rpc ListMetaServer(ListMetaServerRequest)           returns (ListMetaServerResponse);
    rpc GetMetaServer(GetMetaServerInfoRequest)         returns (GetMetaServerInfoResponse);
    rpc DeleteMetaServer(DeleteMetaServerRequest)       returns (DeleteMetaServerResponse);

    rpc RegistServer(ServerRegistRequest)       returns (ServerRegistResponse);
    rpc GetServer(GetServerRequest)             returns (GetServerResponse);
    rpc DeleteServer(DeleteServerRequest)       returns (DeleteServerResponse);
    rpc ListZoneServer(ListZoneServerRequest)   returns (ListZoneServerResponse);

    rpc CreateZone(CreateZoneRequest)     returns (CreateZoneResponse);
    rpc DeleteZone(DeleteZoneRequest)     returns (DeleteZoneResponse);
    rpc GetZone(GetZoneRequest)           returns (GetZoneResponse);
    rpc ListPoolZone(ListPoolZoneRequest) returns (ListPoolZoneResponse);

    rpc CreatePool(CreatePoolRequest)     returns (CreatePoolResponse);
    rpc DeletePool(DeletePoolRequest)     returns (DeletePoolResponse);
    rpc GetPool(GetPoolRequest)           returns (GetPoolResponse);
    rpc ListPool(ListPoolRequest)         returns (ListPoolResponse);

    // TODO @wanghai 需要新增接口
    rpc GetMetaServerListInCopysets(GetMetaServerListInCopySetsRequest) returns (GetMetaServerListInCopySetsResponse);
}