/*
 *  Copyright (c) 2021 NetEase Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

syntax = "proto2";
import "curvefs/proto/common.proto";
import "proto/heartbeat.proto";
package curvefs.mds.heartbeat;
option cc_generic_services = true;

message CopySetInfo {
    required uint32 poolId = 1;
    required uint32 copysetId = 2;
    // copyset replicas, IP:PORT:ID, e.g. 127.0.0.1:8200:0
    repeated common.Peer peers = 3;
    // Used to mark configuration changes, each time there is a change, the epoch will increase
    required uint64 epoch = 4;
    required common.Peer leaderPeer = 5;
    repeated common.PartitionInfo partitionInfoList = 6;
    optional ConfigChangeInfo configChangeInfo = 7;
};

message ConfigChangeInfo {
    required common.Peer peer = 1;
    required curve.mds.heartbeat.ConfigChangeType type = 2;
    required bool finished = 3;
    optional CandidateError err = 4;
};

message CandidateError {
    required uint32 errType = 1;
    required string errMsg = 2;
};

message MetaSeverState {
    // if memoryThreshold - memoryMetaserverUsed  - memoryCopySetMinRequire > 0 , memory meets the conditions, 还可以增加copyset
    required uint64 memoryThresholdByte = 1;  // Byte,这个metaserver最多能使用的内存量
    required uint64 memoryCopySetMinRequireByte = 2;  // Byte, 这个metaserver上的copyset的最小的内存需求
    required uint64 memoryMetaserverUsedByte = 3; // Byte, 这个metaserver当前的进程使用的内存量
    required uint64 diskThresholdByte = 4;  // Byte, metaserver需要考虑磁盘预留，这里传的是磁盘物理容量乘以一定百分比之后的值
    required uint64 diskCopysetMinRequireByte = 5; //  Byte，一个copyset最少需要的磁盘需求
    required uint64 diskMetaserverUsedByte = 6;  // Byte，这个metaserver当前的磁盘使用量
}

message MetaServerHeartbeatRequest {
    required uint32 metaServerID = 1;
    required string token = 2;
    required string ip = 3;
    required uint32 port = 4;
    required uint64 startTime = 5;
    repeated CopySetInfo copysetInfos = 6;
    required uint32 leaderCount = 7;
    required uint32 copysetCount = 8;
    required uint64 metadataSpaceTotal = 9;  // KB
    required uint64 metadataSpaceUsed = 10;  // KB
    required uint64 memoryUsed = 11;  // KB
    required MetaSeverState metaserverState = 12;
};

message CopySetConf {
    required uint32 poolId = 1;
    required uint32 copysetId = 2;
    repeated common.Peer peers = 3;
    required uint64 epoch = 4;
    optional curve.mds.heartbeat.ConfigChangeType type = 5;
    // configchangeItem is the target node
    // for TRANSFER_LEADER: the target peer;
    // for ADD_PEER: the peer to add;
    // for REMOVE_PEER: the peer to delete;
    // for CHANGE_PEER: the peer to add;
    optional common.Peer configchangeItem = 6;
    // oldPeer, This will only be assigned when ConfigChangeType=CHANGE_PEER,
    // Indicates the peer to be deleted.
    // The metaserver receives CHANGE_PEER and put together a new conf based on peers, configchangeItem, and oldPeer
    optional common.Peer oldPeer = 7;
};

enum HeartbeatStatusCode {
    hbOK = 0;
    hbMetaServerUnknown = 1;
    hbMetaServerIpPortNotMatch = 2;
    hbMetaServerTokenNotMatch = 3;
    hbAnalyseCopysetError = 4;
}

message MetaServerHeartbeatResponse {
    required HeartbeatStatusCode statusCode = 1;
    repeated CopySetConf needUpdateCopysets = 2;
};

service HeartbeatService {
    rpc MetaServerHeartbeat (MetaServerHeartbeatRequest) returns (MetaServerHeartbeatResponse);
}
