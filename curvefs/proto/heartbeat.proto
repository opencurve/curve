/*
 *  Copyright (c) 2021 NetEase Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

syntax = "proto2";
import "curvefs/proto/common.proto";
import "curvefs/proto/metaserver.proto";
import "proto/heartbeat.proto";
package curvefs.mds.heartbeat;
option cc_generic_services = true;
option go_package = "curvefs/proto/heartbeat";

// TODO(cw123): add copyset resource usage state later
// message CopySetState {
//     required uint64 momoryUsedByte = 1;  // the momory this copyset used
//     required uint64 diskUsedByte = 2;  // the disk this copyset used
// };

enum BlockGroupDeallcateStatusCode {
    BGDP_PROCESSING = 0;
    BGDP_DONE = 1;
}

message BlockGroupStatInfo {
    required uint32 fsId = 1;
    repeated metaserver.DeallocatableBlockGroup deallocatableBlockGroups = 2;
    map<uint64, BlockGroupDeallcateStatusCode> blockGroupDeallocateStatus = 3;
}

message CopySetInfo {
    required uint32 poolId = 1;
    required uint32 copysetId = 2;
    // copyset replicas, IP:PORT:ID, e.g. 127.0.0.1:8200:0
    repeated common.Peer peers = 3;
    // Used to mark configuration changes, each time there is a change, the epoch will increase
    required uint64 epoch = 4;
    required common.Peer leaderPeer = 5;
    repeated common.PartitionInfo partitionInfoList = 6;
    optional ConfigChangeInfo configChangeInfo = 7;
    optional bool isCopysetLoading = 8;
    // required CopySetState state = 9;
};

message ConfigChangeInfo {
    required common.Peer peer = 1;
    required curve.mds.heartbeat.ConfigChangeType type = 2;
    required bool finished = 3;
    optional CandidateError err = 4;
};

message CandidateError {
    required uint32 errType = 1;
    required string errMsg = 2;
};

message MetaServerSpaceStatus {
    // The metaserver needs to consider the disk reservation.
    // The value passed here is the physical capacity of the disk multiplied
    // by a certain percentage.
    required uint64 diskThresholdByte = 1;
    // Minimum disk requirements for a copyset
    required uint64 diskCopysetMinRequireByte = 2;
    // The current disk usage of this metaserver
    required uint64 diskUsedByte = 3;

    // The maximum amount of memory this metaserver can use
    required uint64 memoryThresholdByte = 4;
    // Minimum memory requirement for copy on this metaserver
    required uint64 memoryCopySetMinRequireByte = 5;
    // The amount of memory used by the current process of this metaserver
    required uint64 memoryUsedByte = 6;
}

message MetaServerHeartbeatRequest {
    required uint32 metaServerID = 1;
    required string token = 2;
    required string ip = 3;
    required uint32 port = 4;
    required uint64 startTime = 5;
    repeated CopySetInfo copysetInfos = 6;
    required uint32 leaderCount = 7;
    required uint32 copysetCount = 8;
    required MetaServerSpaceStatus spaceStatus = 9;
    repeated BlockGroupStatInfo blockGroupStatInfos = 10;
};

message CopySetConf {
    required uint32 poolId = 1;
    required uint32 copysetId = 2;
    repeated common.Peer peers = 3;
    required uint64 epoch = 4;
    optional curve.mds.heartbeat.ConfigChangeType type = 5;
    // configchangeItem is the target node
    // for TRANSFER_LEADER: the target peer;
    // for ADD_PEER: the peer to add;
    // for REMOVE_PEER: the peer to delete;
    // for CHANGE_PEER: the peer to add;
    optional common.Peer configchangeItem = 6;
    // oldPeer, This will only be assigned when ConfigChangeType=CHANGE_PEER,
    // Indicates the peer to be deleted.
    // The metaserver receives CHANGE_PEER and put together a new conf based on peers, configchangeItem, and oldPeer
    optional common.Peer oldPeer = 7;
};

enum HeartbeatStatusCode {
    hbOK = 0;
    hbMetaServerUnknown = 1;
    hbMetaServerIpPortNotMatch = 2;
    hbMetaServerTokenNotMatch = 3;
    hbAnalyseCopysetError = 4;
    hbMetaServerFSUnkown = 5;
}

message MetaServerHeartbeatResponse {
    required HeartbeatStatusCode statusCode = 1;
    repeated CopySetConf needUpdateCopysets = 2;
    // key is fsid, value is blockgroup offset
    map<uint64, uint64> issuedBlockGroups = 3;
};

service HeartbeatService {
    rpc MetaServerHeartbeat (MetaServerHeartbeatRequest) returns (MetaServerHeartbeatResponse);
}
