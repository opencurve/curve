/*
 *  Copyright (c) 2021 NetEase Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

syntax="proto2";
import "curvefs/proto/common.proto";
import "curvefs/proto/mds.proto";
package curvefs.space;
option cc_generic_services = true;

enum SpaceStatusCode {
    SPACE_UNKNOWN_ERROR = 0;
    SPACE_OK = 1;
    SPACE_NOSPACE = 2;
    SPACE_NOT_FOUND = 3;
    SPACE_EXISTS = 4;
    SPACE_RELOAD_ERROR = 5;
}

// space interface
message Extent {
    required uint64 offset = 1;  // the offset in the volume
    required uint64 length = 2;
}

enum AllocateType {
    NONE = 0;
    SMALL = 1;     // small type file allocate
    BIG = 2;       // big type file allocate
    S3 = 3;
}

message AllocateHint {
    optional AllocateType allocType = 1;
    optional uint64 leftOffset = 2;        // The starting position of the address space expected
    optional uint64 rightOffset = 3;       // The end position of the address space expected
}

message InitSpaceRequest {
    required mds.FsInfo fsInfo = 1;
}

message InitSpaceResponse {
    required SpaceStatusCode status = 1;
}

message AllocateSpaceRequest {
    required uint32 fsId = 1;
    required uint32 size = 2;
    optional AllocateHint allocHint = 3;
}

message AllocateSpaceResponse {
    required SpaceStatusCode status = 1;
    repeated Extent extents = 2;     // The applied address space may not be continuous, so it is represented by repeated
}

message DeallocateSpaceRequest {
    required uint32 fsId = 1;
    repeated Extent extents = 2;     // the space deallocate
}

message DeallocateSpaceResponse {
    required SpaceStatusCode status = 1;
}

message StatSpaceRequest {
    required uint32 fsId = 1;
}

message StatSpaceResponse {
    required SpaceStatusCode status = 1;
    optional uint64 blockSize = 2;
    optional uint64 totalBlock = 3;
    optional uint64 availableBlock = 4;
    optional uint64 usedBlock = 5;
}

message UnInitSpaceRequest {
    required uint32 fsId = 1;
}

message UnInitSpaceResponse {
    required SpaceStatusCode status = 1;
}

message AllocateS3ChunkRequest {
    required uint32 fsId = 1;
}

message AllocateS3ChunkResponse {
   required SpaceStatusCode status = 1;  // 状态码
   required uint64 chunkId = 2;
}

service SpaceAllocService {
    // space interface
    rpc InitSpace(InitSpaceRequest) returns (InitSpaceResponse);
    rpc AllocateSpace(AllocateSpaceRequest) returns (AllocateSpaceResponse);
    rpc DeallocateSpace(DeallocateSpaceRequest) returns (DeallocateSpaceResponse);
    rpc StatSpace(StatSpaceRequest) returns (StatSpaceResponse);
    rpc UnInitSpace(UnInitSpaceRequest) returns (UnInitSpaceResponse);
    rpc AllocateS3Chunk(AllocateS3ChunkRequest) returns (AllocateS3ChunkResponse);
}