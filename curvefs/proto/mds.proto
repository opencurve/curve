/*
 *  Copyright (c) 2021 NetEase Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

syntax="proto2";
import "curvefs/proto/common.proto";
package curvefs.mds;
option cc_generic_services = true;

enum FSStatusCode {
    OK = 0;
    UNKNOWN_ERROR = 1;
    NOSPACE = 2;
    FS_NOT_FOUND = 3;
    PARAM_ERROR = 4;
}

// fs interface
message GetFsInfoRequest {
    optional uint32 fsId = 1;     // Globally unique, no duplicates allowed
    optional string fsName = 2;   // Globally unique, no duplicates allowed
}

message mountPoint {
    required string host = 1;
    required string mountDir = 2;     // use full path
}

message FsInfo {
    required uint32 fsId = 1;
    required string fsName = 2;
    required uint64 rootInodeId = 3;
    required uint64 capacity = 4;
    required uint64 blockSize = 5;
    required common.Volume volume = 6;
    required uint32 mountNum = 7;
    repeated mountPoint mountpoints = 8;
}

message GetFsInfoResponse {
    required FSStatusCode statusCode = 1;
    optional FsInfo fsInfo = 2;
}

message CreateFsRequest {
    required string fsName = 1;
    required uint64 blockSize = 2;
    required common.Volume volume = 3;
}

message CreateFsResponse {
    required FSStatusCode statusCode = 1;
    optional FsInfo fsInfo = 2;
}

message MountFsRequest {
    required string fsName = 1;
    required mountPoint mountpoint = 2;
}

message MountFsResponse {
    required FSStatusCode statusCode = 1;
    optional FsInfo fsInfo = 2;
}

message UmountFsRequest {
    required string fsName = 1;
    required mountPoint mountpoint = 2;
}

message UmountFsResponse {
    required FSStatusCode statusCode = 1;
}

/* UpdateFsInfoRequest comment now
message UpdateFsInfoRequest {
    required string fsName = 1;
    // todo
}

message UpdateFsInfoResponse {
    required FSStatusCode statusCode = 1;
    optional FsInfo fsInfo = 2;
}
*/

message DeleteFsRequest {
    required string fsName = 2;
}

message DeleteFsResponse {
    required FSStatusCode statusCode = 1;
}

service MdsService {
    // fs interface
    rpc CreateFs(CreateFsRequest) returns (CreateFsResponse);
    rpc MountFs(MountFsRequest) returns (MountFsResponse);
    rpc UmountFs(UmountFsRequest) returns (UmountFsResponse);
    rpc GetFsInfo(GetFsInfoRequest) returns (GetFsInfoResponse);
    // rpc UpdateFsInfo(UpdateFsInfoRequest) returns (UpdateFsInfoResponse);
    rpc DeleteFs(DeleteFsRequest) returns (DeleteFsResponse);
}