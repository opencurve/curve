/*
*  Copyright (c) 2020 NetEase Inc.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*/

syntax="proto2";

import "curvefs/proto/common.proto";
package curvefs.metaserver.copyset;
option cc_generic_services = true;
option go_package = "curvefs/proto/cli2";

message GetLeaderRequest2 {
    required uint32 poolId     = 1;
    required uint32 copysetId  = 2;
    optional common.Peer peer  = 3;
}

message GetLeaderResponse2 {
    required common.Peer leader = 1;
}

message AddPeerRequest2 {
    required uint32 poolId = 1;
    required uint32 copysetId = 2;
    required common.Peer addPeer = 3;
}

message AddPeerResponse2 {
    repeated common.Peer oldPeers = 1;
    repeated common.Peer newPeers = 2;
}

message RemovePeerRequest2 {
    required uint32 poolId = 1;
    required uint32 copysetId = 2;
    required common.Peer removePeer = 3;
}

message RemovePeerResponse2 {
    repeated common.Peer oldPeers = 1;
    repeated common.Peer newPeers = 2;
}

message ChangePeersRequest2 {
    required uint32 poolId = 1;
    required uint32 copysetId = 2;
    repeated common.Peer newPeers = 3;
}

message ChangePeersResponse2 {
    repeated common.Peer oldPeers = 1;
    repeated common.Peer newPeers = 2;
}

message TransferLeaderRequest2 {
    required uint32 poolId = 1;
    required uint32 copysetId = 2;
    required common.Peer transferee = 3;
}

message TransferLeaderResponse2 {}

service CliService2 {
    rpc GetLeader(GetLeaderRequest2) returns (GetLeaderResponse2);
    rpc AddPeer(AddPeerRequest2) returns (AddPeerResponse2);
    rpc RemovePeer(RemovePeerRequest2) returns (RemovePeerResponse2);
    rpc ChangePeers(ChangePeersRequest2) returns (ChangePeersResponse2);
    rpc TransferLeader(TransferLeaderRequest2) returns (TransferLeaderResponse2);
};
