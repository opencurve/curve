/*
 *  Copyright (c) 2020 NetEase Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 * Project: curve
 * Created Date: Mon Dec 17 2018
 * Author: xuchaojie
 */

#ifndef SRC_COMMON_UUID_H_
#define SRC_COMMON_UUID_H_
extern "C" {
#include <uuid/uuid.h>
void uuid_generate(uuid_t out);
void uuid_generate_random(uuid_t out);
void uuid_generate_time(uuid_t out);
// Indicate whether the UUID generated by uuid_generate_time utilizes a time
// synchronization mechanism without encapsulation
int uuid_generate_time_safe(uuid_t out);
}
#include <string>
#define BUFF_LEN 36
namespace curve {
namespace common {
// Generator for generating uuid
class UUIDGenerator {
 public:
    UUIDGenerator() {}

    /**
     *  @brief Generate a UUID with a prioritized algorithm selection
     * If a high-quality random number generator (/dev/urandom) is available,
     * the UUID will be generated based on the random numbers it generates.
     * Backup algorithm: If a high-quality random number generator is not
     * available and if the MAC address can be obtained, the UUID will be
     * generated using a combination of random numbers, current time, and the
     * MAC address.
     *  @param :
     *  @return The generated UUID
     */
    std::string GenerateUUID() {
        uuid_t out;
        char buf[BUFF_LEN];
        uuid_generate(out);
        uuid_unparse_lower(out, buf);
        std::string str(&buf[0], BUFF_LEN);
        return str;
    }

    /**
     *  @brief Generate a UUID for the specified purpose.
     * It utilizes the global clock and MAC address, but there is a risk of MAC
     * address leakage. To ensure uniqueness, it also employs a time
     * synchronization mechanism. However, if the time synchronization mechanism
     * is not available, there is a possibility of UUID duplication when
     * generated on multiple machines.
     *  @param :
     *  @return The generated UUID
     */
    std::string GenerateUUIDTime() {
        uuid_t out;
        char buf[BUFF_LEN];
        uuid_generate_time(out);
        uuid_unparse_lower(out, buf);
        std::string str(&buf[0], BUFF_LEN);
        return str;
    }

    /**
     *  @brief Generate a UUID
     * Forcefully utilize random numbers, with a preference for (/dev/urandom)
     * and a fallback to pseudo-random number generation. When using the
     * pseudo-random number generator, there is a risk of UUID duplication.
     *  @return The generated UUID
     */
    std::string GenerateUUIDRandom() {
        uuid_t out;
        char buf[BUFF_LEN];
        uuid_generate_random(out);
        uuid_unparse_lower(out, buf);
        std::string str(&buf[0], BUFF_LEN);
        return str;
    }
};

}  // namespace common
}  // namespace curve

#endif  // SRC_COMMON_UUID_H_
