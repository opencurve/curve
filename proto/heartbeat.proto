/*
 *  Copyright (c) 2020 NetEase Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 * Project: curve
 * Created Date: Mon Nov 19 2018
 * Author: xuchaojie
 */

syntax = "proto2";
import "proto/common.proto";
import "proto/scan.proto";
package curve.mds.heartbeat;

option cc_generic_services = true;
option go_package = "proto/heartbeat";

message CopySetInfo {
    required uint32 logicalPoolId = 1;
    required uint32 copysetId = 2;
    // copyset replicas, IP:PORT:ID, e.g. 127.0.0.1:8200:0
    repeated common.Peer peers = 3;
    //Epoch is used to mark configuration changes. Every time a change is made, epoch will increase
    required uint64 epoch = 4;
    //The leader of this replication group
    required common.Peer leaderPeer = 5;
    //Configuration change related information
    optional ConfigChangeInfo configChangeInfo = 6;
    //Performance information of copyset
    optional CopysetStatistics stats = 7;
    // whether the current copyset is on scaning
    optional bool scaning = 8;
    // timestamp for last success scan (seconds)
    optional uint64 lastScanSec = 9;
    // the detail information for inconsistent copyset
    repeated chunkserver.ScanMap scanMap = 10;
};

message ConfigChangeInfo {
    required common.Peer peer = 1;
    //Types of configuration changes
    required ConfigChangeType type = 2;
    //Is the configuration change successful
    required bool finished = 3;
    //Changed error information
    optional CandidateError err = 4;
};

message CandidateError {
    required uint32 errType = 1;
    required string errMsg = 2;
};

message CopysetStatistics {
    required uint32 readRate = 1;
    required uint32 writeRate = 2;
    required uint32 readIOPS = 3;
    required uint32 writeIOPS = 4;
}

message DiskState {
    required uint32 errType = 1;
    required string errMsg = 2;
}

message ChunkServerStatisticInfo {
    required uint32 readRate = 1;
    required uint32 writeRate = 2;
    required uint32 readIOPS = 3;
    required uint32 writeIOPS = 4;
    //Disk space occupied by used chunks
    required uint64 chunkSizeUsedBytes = 5;
    //Disk space occupied by unused chunks in chunkfilepool
    required uint64 chunkSizeLeftBytes = 6;
    //Disk space occupied by chunks in the recycle bin
    required uint64 chunkSizeTrashedBytes = 7;
    //The size of chunkfilepool
    optional uint64 chunkFilepoolSize = 8;
};

message ChunkServerHeartbeatRequest {
    required uint32 chunkServerID = 1;
    required string token = 2;
    required string ip = 3;
    required uint32 port = 4;
    optional uint64 startTime = 5;
    required DiskState diskState = 6;
    required uint64 diskCapacity = 7;
    required uint64 diskUsed = 8;
    //Returns information about all copysets on this chunk
    repeated CopySetInfo copysetInfos = 9;
    //The number of leaders on this chunkserver within the time window
    required uint32 leaderCount = 10;
    //The number of copysets on this chunkserver within the time window
    required uint32 copysetCount = 11;
    //ChunkServer related statistical information
    optional ChunkServerStatisticInfo stats = 12;
    optional string version = 13;
};

enum ConfigChangeType {
    //Configuration change command: leader conversion
    TRANSFER_LEADER = 1;
    //Configuration change command: Add a member to the replication group
    ADD_PEER = 2;
    //Configuration change command: Delete a member from a replication group
    REMOVE_PEER = 3;
    //Configuration change command: No configuration changes
    NONE = 4;
    //Configuration change command: change a member of a replication group
    CHANGE_PEER = 5;
    // start scan on the peer
    START_SCAN_PEER = 6;
    // cancel scan on the peer
    CANCEL_SCAN_PEER = 7;
};

message CopySetConf {
    required uint32 logicalPoolId = 1;
    required uint32 copysetId = 2;
    repeated common.Peer peers = 3;
    required uint64 epoch = 4;
    optional ConfigChangeType type = 5;
    //ConfigchangeItem is the target node
    //For TRANSFER_ LEADER: represents the target node; For ADD_PEER: indicates the node to be added
    //For MOVE_ PEER: represents the node to be deleted; For CHANGE_PEER: indicates the node to be added
    // SCAN_PEER: to scan the node
    optional common.Peer configchangeItem = 6;
    //OldPeer, this only applies to ConfigChangeType=for In the case of CHANGE_PEER, a value will be assigned,
    //Represents a node to be deleted.
    //Chunkserver received CHANGE_PEER, according to peers, configchangeItem, oldPeer, spell out a new conf
    optional common.Peer oldPeer = 7;
};

enum HeartbeatStatusCode {
    //Normal return
    hbOK = 0;
    //The necessary parameters are initialization
    hbParamUnInitialized = 1;
    //Chunkserver is not in topology
    hbChunkserverUnknown = 2;
    //Chunkserver status is retired
    hbChunkserverRetired = 3;
    //The IP and port of chunkserver do not match those in topology
    hbChunkserverIpPortNotMatch = 4;
    //Chunkserver token mismatch
    hbChunkserverTokenNotMatch = 5;
    //No copyset reported
    hbRequestNoCopyset = 6;
    //Copyset conversion to topology format failed
    hbAnalyseCopysetError = 7;
}

message ChunkServerHeartbeatResponse {
    //Returns information about the copyset that needs to be changed
    repeated CopySetConf needUpdateCopysets = 1;
    //Error code
    optional HeartbeatStatusCode statusCode = 2;
};

service HeartbeatService {
    rpc ChunkServerHeartbeat (ChunkServerHeartbeatRequest) returns (ChunkServerHeartbeatResponse);
}
