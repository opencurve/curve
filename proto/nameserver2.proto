syntax="proto2";
package curve.mds;

option cc_generic_services = true;


// fileinfo
enum FileType {
    INODE_DIRECTORY = 0;
    INODE_PAGEFILE = 1;
    INODE_APPENDFILE = 2;
    INODE_APPENDECFILE = 3;
    INODE_SNAPSHOT_PAGEFILE = 4;
};

enum FileStatus {
    kFileCreated = 0;
    kFileDeleting = 1;

    kFileCloning = 2;
    kFileCloneMetaInstalled = 3;
    kFileCloned = 4;
}

message FileInfo {
    optional    uint64      id = 1;
    optional    string      fileName = 2;
    optional    uint64      parentId = 3;
    optional    FileType    fileType = 4;
    optional    string      owner = 5;
    optional    uint32      chunkSize = 6;
    optional    uint32      segmentSize = 7;
    optional    uint64      length = 8;
    optional    uint64      ctime  = 9;
    optional    uint64      seqNum =  10;
    optional    FileStatus  fileStatus = 11;
    //用于文件转移到回收站的情况下恢复场景下的使用,
    //RecycleBin（回收站）目录下使用/其他场景下不使用
    optional    string      originalFullPathName = 12;
}

// status code
enum  StatusCode {
    // 执行成功
    kOK = 0;

    // 文件已存在
    kFileExists = 101;
    // 文件不存在
    kFileNotExists = 102;
    // 非目录类型
    kNotDirectory = 103;
    // 传入参数错误
    kParaError = 104;
    // 缩小文件，目前不支持缩小文件
    kShrinkBiggerFile = 105;
    // 扩容单位错误，非segment size整数倍
    kExtentUnitError = 106;
    // segment未分配
    kSegmentNotAllocated = 107;
    // segment分配失败
    kSegmentAllocateError = 108;
    // 目录不存在
    kDirNotExist = 109;
    // 功能不支持
    kNotSupported = 110;
    // owner认证失败
    kOwnerAuthFail = 111;
    // 目录非空
    kDirNotEmpty = 112;

    // 文件已处于快照中
    kFileUnderSnapShot = 120;
    // 文件不在快照中
    kFileNotUnderSnapShot = 121;
    // 快照删除中
    kSnapshotDeleting = 122;
    // 快照文件不存在
    kSnapshotFileNotExists = 123;
    // 快照文件删除失败
    kSnapshotFileDeleteError = 124;
    // session不存在
    kSessionNotExist = 125;
    // 文件已被占用
    kFileOccupied = 126;

    kCloneFileNameIllegal = 127;
    kCloneStatusNotMatch = 128;
    // 文件删除失败
    kCommonFileDeleteError = 129;
    // 文件id不匹配
    kFileIdNotMatch = 130;
    // 文件在删除中
    kFileUnderDeleting = 131;
    // 文件长度不符合要求
    kFileLengthNotSupported = 132;
    // 元数据存储错误
    kStorageError = 501;
    // 内部错误
    KInternalError = 502;
};

//chunkinfo
message PageFileChunkInfo {
    required uint32 copysetID = 3;
    required uint64 chunkID = 2;
}

message PageFileSegment {
    required uint32 logicalPoolID = 1;
    required uint32 segmentSize = 3;
    required uint32 chunkSize = 4;
    required uint64 startOffset = 2;
    repeated  PageFileChunkInfo chunks = 5;
}

message CreateFileRequest {
    required string     fileName = 1;
    required FileType   fileType = 3;
    optional uint64     fileLength = 4;

    required string     owner = 2;
    optional string     signature = 5;
    required uint64     date = 6;
};

message CreateFileResponse {
    required StatusCode statusCode = 1;
}

message DeleteFileRequest {
    required string     fileName = 1;
    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
    optional uint64     fileId = 5;
    optional bool       forceDelete = 6;
};

message DeleteFileResponse {
    required StatusCode statusCode = 1;
}

message GetFileInfoRequest {
    required string     fileName = 1;

    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
}

message GetFileInfoResponse {
    required StatusCode statusCode = 1;
    optional FileInfo fileInfo = 2;
}

message GetOrAllocateSegmentRequest {
    required string     fileName = 1;
    required uint64     offset = 3;
    required bool       allocateIfNotExist = 4;
    optional uint64     seqNum = 5;

    required string     owner = 2;
    optional string     signature = 6;
    required uint64     date = 7;
}

message GetOrAllocateSegmentResponse {
    required StatusCode statusCode = 1;
    optional PageFileSegment pageFileSegment = 2;
}

message RenameFileRequest {
    required string     oldFileName = 1;
    required string     newFileName = 2;

    required string     owner = 3;
    optional string     signature = 4;
    required uint64     date = 7;


    optional uint64     oldFileID = 5;
    optional uint64     newFileID = 6;
}

message RenameFileResponse {
    required StatusCode statusCode = 1;
}

message ExtendFileRequest {
    required string     fileName = 1;
    required uint64     newSize = 3;

    required string     owner = 2;
    optional string     signature = 4;
    required uint64     date = 5;
}

message ExtendFileResponse {
    required StatusCode statusCode = 1;
}

message ChangeOwnerRequest {
    // 需要变更owner的文件的fileName
    required string fileName = 1;
    // 希望文件owner变更后的新的owner
    required string newOwner = 2;
    // ChangerOwner接口只能通过root权限进行调用，需要传入root权限的owner
    required string rootOwner = 3;
    // 对root身份进行校验的的signature
    required string signature = 4;
    // 用来在mds端重新计算signature
    required uint64 date = 5;
}

// 返回ChangeOwner的执行结果，成功返回statusCode::kOK
// 失败可能返回kFileNotExists、kOwnerAuthFail、kFileOccupied、kStorageError等，可能返回的错误码将来继续补充
message ChangeOwnerResponse {
    required StatusCode statusCode = 1;
}

message ListDirRequest {
    required string     fileName = 1;
    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
}

message ListDirResponse {
    required StatusCode statusCode = 1;
    repeated FileInfo fileInfo = 2;
}

// create snapshot
message CreateSnapShotRequest {
    required string     fileName = 1;

    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
}

message CreateSnapShotResponse {
    required StatusCode statusCode = 1;
    optional FileInfo   snapShotFileInfo = 2;
}

// list snapshots
message ListSnapShotFileInfoRequest {
    required string     fileName = 1;
    repeated uint64     seq = 3;

    required string     owner = 2;
    optional string     signature = 4;
    required uint64     date = 5;
}

message ListSnapShotFileInfoResponse {
    required StatusCode statusCode = 1;
    repeated FileInfo fileInfo = 2;
}

// delete snapshot
message DeleteSnapShotRequest {
    required string     fileName = 1;
    required uint64     seq = 3;

    required string     owner = 2;
    optional string     signature = 4;
    required uint64     date = 5;
}

message DeleteSnapShotResponse {
    required StatusCode statusCode = 1;
}

// check snapshot status

message CheckSnapShotStatusRequest {
    required string     fileName = 1;
    required uint64     seq = 3;

    required string     owner = 2;
    optional string     signature = 4;
    required uint64     date = 5;
}

// statusCode为kOK时，fileStatus和progress才会赋值
// 只有fileStatus是kFileDeleting时，progress表示快照文件删除进度，否则progress返回0
message CheckSnapShotStatusResponse {
    required StatusCode statusCode = 1;
    optional FileStatus     fileStatus = 2;
    optional uint32 progress  = 3;
}

// session rpcs
enum SessionStatus {
    kSessionOK = 0;
    kSessionStaled = 1;
    kSessionDeleted = 2;
};

message ProtoSession {
    required string sessionID  = 1;
    required uint32 leaseTime = 2;
    required uint64 createTime = 3;
    required SessionStatus sessionStatus = 4;
    // other useful infos
};

message OpenFileRequest {
    required string fileName = 1;
    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
};

// statusCode返回值，详见StatusCode定义:
// StatusCode::kOK
// StatusCode::kFileNotExists
// StatusCode::kStorageError
// StatusCode::kFileOccupied
// StatusCode::KInternalError
message OpenFileResponse {
    required StatusCode statusCode = 1;
    optional ProtoSession protoSession = 2;
    optional FileInfo   fileInfo = 3;
};

message CloseFileRequest {
    required string     fileName = 1;
    required string     sessionID = 2;

    required string     owner = 3;
    optional string     signature = 4;
    required uint64     date = 5;
};

// statusCode返回值，详见StatusCode定义:
// StatusCode::kOK
// StatusCode::kFileNotExists
// StatusCode::kStorageError
// StatusCode::kSessionNotExist
// StatusCode::KInternalError
message CloseFileResponse {
    required StatusCode statusCode = 1;
}

message ReFreshSessionRequest {
    required string     fileName = 1;
    required string     sessionID = 2;

    required string     owner = 3;
    required uint64     date = 4; //current time
    optional string     signature = 5;
}

// statusCode返回值，详见StatusCode定义:
// StatusCode::kOK
// StatusCode::kFileNotExists
// StatusCode::kStorageError
// StatusCode::kSessionNotExist
message ReFreshSessionResponse {
    required StatusCode statusCode = 1;
    required string     sessionID = 2;
    optional FileInfo   fileInfo = 3;
    optional ProtoSession protoSession = 4;
};


message  CreateCloneFileRequest {
    required string     fileName = 1;
    required FileType   fileType = 2;
    required uint64     fileLength = 3;
    required uint64     seq = 4;
    required uint32     chunksize = 5;

    required string     owner = 6;
    optional string     signature = 7;
    required uint64     date =8;
}

message CreateCloneFileResponse {
    required StatusCode statusCode = 1;
    optional FileInfo fileInfo = 2;
}

message SetCloneFileStatusRequest {
    required string     fileName = 1;
    optional uint64     fileID = 2;
    required FileStatus fileStatus = 3;

    required string     owner = 4;
    optional string     signature = 5;
    required uint64     date = 6;
}

message SetCloneFileStatusResponse {
    required StatusCode statusCode = 1;
}

message RegistClientRequest {
    required string ip = 1;
    required uint32 port = 2;
}

message RegistClientResponse {
    required StatusCode statusCode = 1;
}

service CurveFSService {
    // basic rpcs
    rpc     CreateFile(CreateFileRequest) returns (CreateFileResponse);
    rpc     DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);
    rpc     GetFileInfo(GetFileInfoRequest) returns (GetFileInfoResponse);
    rpc     GetOrAllocateSegment(GetOrAllocateSegmentRequest)
                returns (GetOrAllocateSegmentResponse);
    rpc     RenameFile(RenameFileRequest) returns (RenameFileResponse);
    rpc     ExtendFile(ExtendFileRequest) returns (ExtendFileResponse);
    rpc     ChangeOwner(ChangeOwnerRequest) returns (ChangeOwnerResponse);
    rpc     ListDir(ListDirRequest) returns (ListDirResponse);

    // snapshot rpcs
    rpc     CreateSnapShot(CreateSnapShotRequest)
                returns (CreateSnapShotResponse);
    rpc     ListSnapShot(ListSnapShotFileInfoRequest)
            returns (ListSnapShotFileInfoResponse);
    rpc     DeleteSnapShot(DeleteSnapShotRequest)
            returns (DeleteSnapShotResponse);
    rpc     CheckSnapShotStatus(CheckSnapShotStatusRequest)
            returns (CheckSnapShotStatusResponse);
    rpc     GetSnapShotFileSegment(GetOrAllocateSegmentRequest)
                returns (GetOrAllocateSegmentResponse);

    // session rpcs
    rpc     OpenFile(OpenFileRequest) returns (OpenFileResponse);
    rpc     CloseFile(CloseFileRequest) returns (CloseFileResponse);
    rpc     RefreshSession(ReFreshSessionRequest)
        returns (ReFreshSessionResponse);

    // clone rpcs
    rpc     CreateCloneFile(CreateCloneFileRequest) returns (CreateCloneFileResponse);
    rpc     SetCloneFileStatus(SetCloneFileStatusRequest) returns (SetCloneFileStatusResponse);

    // curve status
    rpc     RegistClient(RegistClientRequest) returns (RegistClientResponse);
}
