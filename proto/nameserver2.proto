/*
 *  Copyright (c) 2020 NetEase Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

syntax="proto2";
import "proto/common.proto";
package curve.mds;

option cc_generic_services = true;
option go_package = "proto/nameserver2";


// fileinfo
enum FileType {
    INODE_DIRECTORY = 0;
    INODE_PAGEFILE = 1;
    INODE_APPENDFILE = 2;
    INODE_APPENDECFILE = 3;
    INODE_SNAPSHOT_PAGEFILE = 4;
    INODE_CLONE_PAGEFILE = 5;
};

enum FileStatus {
    // 文件创建完成
    kFileCreated = 0;
    // 文件删除中
    kFileDeleting = 1;

    // 文件正在克隆
    kFileCloning = 2;
    // 文件元数据安装完毕
    kFileCloneMetaInstalled = 3;
    // 文件克隆完成
    kFileCloned = 4;
    // 文件正在被克隆
    kFileBeingCloned = 5;

    // flattening
    kFileFlattening = 6;
}

message FileInfo {
    optional    uint64      id = 1;
    optional    string      fileName = 2;
    optional    uint64      parentId = 3;
    optional    FileType    fileType = 4;
    optional    string      owner = 5;
    optional    uint32      chunkSize = 6;
    optional    uint32      segmentSize = 7;
    optional    uint64      length = 8;
    optional    uint64      ctime  = 9;
    optional    uint64      seqNum =  10;
    optional    FileStatus  fileStatus = 11;
    //用于文件转移到回收站的情况下恢复场景下的使用,
    //RecycleBin（回收站）目录下使用/其他场景下不使用
    optional    string      originalFullPathName = 12;

    // cloneSource 当前用于存放克隆源(当前主要用于curvefs)
    // 后期可以考虑存放 s3相关信息
    // 本地克隆时用于存放父节点(卷名), 快照名可以加上cloneSn组成
    optional    string      cloneSource   =    13;

    // cloneLength 克隆源文件的长度，用于clone过程中进行extent
    optional    uint64      cloneLength =  14;
    optional    uint64      stripeUnit = 15;
    optional    uint64      stripeCount = 16;

    optional    uint64      epoch = 18;
    optional    string      poolset = 19;
    optional    uint32      blocksize = 20;

    // sequence numbers of snapshots
    repeated    uint64      snaps = 21;

    optional    bool initCloneSegment = 22;  // 是否已经初始化克隆的segment

    optional    uint64      cloneSn = 23;  // 如果该卷是克隆卷，保存源快照sn

    //clone tree
    message CloneInfos {
        required uint64 fileId = 1;
        required uint64 cloneSn = 2;
    }
    repeated    CloneInfos  clones = 24;  // 向client端返回的克隆链，不持久化

    optional bool isProtected = 25;  // for snapshot
    repeated string children = 26;
}

// status code
enum  StatusCode {
    // 执行成功
    kOK = 0;

    // 文件已存在
    kFileExists = 101;
    // 文件不存在
    kFileNotExists = 102;
    // 非目录类型
    kNotDirectory = 103;
    // 传入参数错误
    kParaError = 104;
    // 缩小文件，目前不支持缩小文件
    kShrinkBiggerFile = 105;
    // 扩容单位错误，非segment size整数倍
    kExtentUnitError = 106;
    // segment未分配
    kSegmentNotAllocated = 107;
    // segment分配失败
    kSegmentAllocateError = 108;
    // 目录不存在
    kDirNotExist = 109;
    // 功能不支持
    kNotSupported = 110;
    // owner认证失败
    kOwnerAuthFail = 111;
    // 目录非空
    kDirNotEmpty = 112;

    // 文件已处于快照中
    kFileUnderSnapShot = 120;
    // 文件不在快照中
    kFileNotUnderSnapShot = 121;
    // 快照删除中
    kSnapshotDeleting = 122;
    // 快照文件不存在
    kSnapshotFileNotExists = 123;
    // 快照文件删除失败
    kSnapshotFileDeleteError = 124;
    // session不存在
    kSessionNotExist = 125;
    // 文件已被占用
    kFileOccupied = 126;

    kCloneFileNameIllegal = 127;
    kCloneStatusNotMatch = 128;
    // 文件删除失败
    kCommonFileDeleteError = 129;
    // 文件id不匹配
    kFileIdNotMatch = 130;
    // 文件在删除中
    kFileUnderDeleting = 131;
    // 文件长度不符合要求
    kFileLengthNotSupported = 132;
    // 文件正在被克隆
    kDeleteFileBeingCloned = 133;
    // client版本不匹配
    kClientVersionNotMatch = 134;
    // snapshot功能禁用中
    kSnapshotFrozen = 135;
    // 快照克隆服务连不上
    kSnapshotCloneConnectFail = 136;
    // 快照克隆服务未初始化
    kSnapshotCloneServerNotInit = 137;
    // recover file status is CloneMetaInstalled
    kRecoverFileCloneMetaInstalled = 138;
    // recover file fail
    kRecoverFileError = 139;

    // epoch too old
    kEpochTooOld = 140;
    // poolset doesn't exist
    kPoolsetNotExist = 141;
    // file status invalid
    kFileStatusInvalid = 142;
    // flatten file type invalid
    kFileTypeInvalid = 143;
    // snapshot not protected
    kSnapshotFileNotProtected = 144;
    // snapshot protected
    kSnapshotFileProtected=145;
    // file is flattening
    kFileIsFlattening = 146;
    // file not flattening
    kFileNotFlattening = 147;
    // snapshot exist
    kSnapshotExist = 148;

    // 元数据存储错误
    kStorageError = 501;
    // 内部错误
    KInternalError = 502;
};

//chunkinfo
message PageFileChunkInfo {
    required uint32 copysetID = 3;
    required uint64 chunkID = 2;
}

message PageFileSegment {
    required uint32 logicalPoolID = 1;
    required uint32 segmentSize = 3;
    required uint32 chunkSize = 4;
    required uint64 startOffset = 2;
    repeated PageFileChunkInfo chunks = 5;
    optional uint64 originFileId = 6; // 克隆源文件id
}

message CreateFileRequest {
    required string     fileName = 1;
    required FileType   fileType = 3;
    optional uint64     fileLength = 4;

    required string     owner = 2;
    optional string     signature = 5;
    required uint64     date = 6;
    optional uint64     stripeUnit = 7;
    optional uint64     stripeCount = 8;
    optional string     poolset = 9;
};

message CreateFileResponse {
    required StatusCode statusCode = 1;
}

message DeleteFileRequest {
    required string     fileName = 1;
    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
    optional uint64     fileId = 5;
    optional bool       forceDelete = 6;
};

message DeleteFileResponse {
    required StatusCode statusCode = 1;
}

message RecoverFileRequest {
    required string     fileName = 1;
    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
    optional uint64     fileId = 5;
};

message RecoverFileResponse {
    required StatusCode statusCode = 1;
}

message GetFileInfoRequest {
    required string     fileName = 1;

    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
}

message GetFileInfoResponse {
    required StatusCode statusCode = 1;
    optional FileInfo fileInfo = 2;
}

message GetOrAllocateSegmentRequest {
    required string     fileName = 1;
    required uint64     offset = 3;
    required bool       allocateIfNotExist = 4;
    optional uint64     seqNum = 5;

    required string     owner = 2;
    optional string     signature = 6;
    required uint64     date = 7;

    optional uint64     epoch = 8;
}

message GetOrAllocateSegmentResponse {
    required StatusCode statusCode = 1;
    optional PageFileSegment pageFileSegment = 2;
}

message RenameFileRequest {
    required string     oldFileName = 1;
    required string     newFileName = 2;

    required string     owner = 3;
    optional string     signature = 4;
    required uint64     date = 7;


    optional uint64     oldFileID = 5;
    optional uint64     newFileID = 6;
}

message RenameFileResponse {
    required StatusCode statusCode = 1;
}

message ExtendFileRequest {
    required string     fileName = 1;
    required uint64     newSize = 3;

    required string     owner = 2;
    optional string     signature = 4;
    required uint64     date = 5;
}

message ExtendFileResponse {
    required StatusCode statusCode = 1;
}

message ChangeOwnerRequest {
    // 需要变更owner的文件的fileName
    required string fileName = 1;
    // 希望文件owner变更后的新的owner
    required string newOwner = 2;
    // ChangerOwner接口只能通过root权限进行调用，需要传入root权限的owner
    required string rootOwner = 3;
    // 对root身份进行校验的的signature
    required string signature = 4;
    // 用来在mds端重新计算signature
    required uint64 date = 5;
}

// 返回ChangeOwner的执行结果，成功返回statusCode::kOK
// 失败可能返回kFileNotExists、kOwnerAuthFail、kFileOccupied、kStorageError等，可能返回的错误码将来继续补充
message ChangeOwnerResponse {
    required StatusCode statusCode = 1;
}

message ListDirRequest {
    required string     fileName = 1;
    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
}

message ListDirResponse {
    required StatusCode statusCode = 1;
    repeated FileInfo fileInfo = 2;
}

// create snapshot
message CreateSnapShotRequest {
    required string     snapFileName = 1;

    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
}

message CreateSnapShotResponse {
    required StatusCode statusCode = 1;
    optional FileInfo   snapShotFileInfo = 2;
}

// list snapshots
message ListSnapShotFileInfoRequest {
    required string     fileName = 1;
    repeated uint64     seq = 3;

    required string     owner = 2;
    optional string     signature = 4;
    required uint64     date = 5;
}

message ListSnapShotFileInfoResponse {
    required StatusCode statusCode = 1;
    repeated FileInfo fileInfo = 2;
}

// delete snapshot
message DeleteSnapShotRequest {
    required string     snapFileName = 1;

    required string     owner = 2;
    optional string     signature = 4;
    required uint64     date = 5;
}

message DeleteSnapShotResponse {
    required StatusCode statusCode = 1;
}

// check snapshot status

message CheckSnapShotStatusRequest {
    required string     fileName = 1;
    required uint64     seq = 3;

    required string     owner = 2;
    optional string     signature = 4;
    required uint64     date = 5;
}

// statusCode为kOK时，fileStatus和progress才会赋值
// 只有fileStatus是kFileDeleting时，progress表示快照文件删除进度，否则progress返回0
message CheckSnapShotStatusResponse {
    required StatusCode statusCode = 1;
    optional FileStatus     fileStatus = 2;
    optional uint32 progress  = 3;
}

// protect & unprotect
message ProtectSnapShotRequest {
    optional string     snapFileName = 1;

    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
}

message ProtectSnapShotResponse {
    required StatusCode statusCode = 1;
}

message UnprotectSnapShotRequest {
    optional string     snapFileName = 1;

    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
}

message UnprotectSnapShotResponse {
    required StatusCode statusCode = 1;
}

// clone rpcs
message CloneRequest {
    required string     fileName = 1;
    required string     snapFileName = 2;

    required string     owner = 3;
    optional string     signature = 4;
    required uint64     date = 5;
}

message CloneResponse {
    required StatusCode statusCode = 1;
    optional FileInfo fileInfo = 2;
}

// flatten rpcs
message FlattenRequest {
    required string     fileName = 1;
    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
}

message FlattenResponse {
    required StatusCode statusCode = 1;
}

// query flatten progress
message QueryFlattenStatusRequest {
    required string     fileName = 1;
    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
}

message QueryFlattenStatusResponse {
    required StatusCode statusCode = 1;
    optional FileStatus fileStatus = 2;
    optional uint32 progress = 3;
}

// children message
message ChildrenRequest {
    optional string     fileName = 1;
    optional string     snapFileName = 2;
    required string     owner = 3;
    optional string     signature = 4;
    required uint64     date = 5;
}

message ChildrenResponse {
    required StatusCode statusCode = 1;
    repeated string fileNames = 2;
}

// session rpcs
enum SessionStatus {
    kSessionOK = 0;
    kSessionStaled = 1;
    kSessionDeleted = 2;
};

message ProtoSession {
    required string sessionID  = 1;
    required uint32 leaseTime = 2;
    required uint64 createTime = 3;
    required SessionStatus sessionStatus = 4;
    // other useful infos
};

message CloneSourceSegment {
    required uint64 segmentSize = 1;
    repeated uint64 allocatedSegmentOffset = 2;
}

message OpenFileRequest {
    required string fileName = 1;
    required string owner = 2;
    optional string signature = 3;
    required uint64 date = 4;
    optional string clientVersion = 5;
};

// statusCode返回值，详见StatusCode定义:
// StatusCode::kOK
// StatusCode::kFileNotExists
// StatusCode::kStorageError
// StatusCode::kFileOccupied
// StatusCode::KInternalError
message OpenFileResponse {
    required StatusCode statusCode = 1;
    optional ProtoSession protoSession = 2;
    optional FileInfo   fileInfo = 3;
    optional CloneSourceSegment cloneSourceSegment = 4;
};

message CloseFileRequest {
    required string     fileName = 1;
    required string     sessionID = 2;

    required string     owner = 3;
    optional string     signature = 4;
    required uint64     date = 5;

    optional string     clientIP = 6;
    optional uint32     clientPort = 7;
};

// statusCode返回值，详见StatusCode定义:
// StatusCode::kOK
// StatusCode::kFileNotExists
// StatusCode::kStorageError
// StatusCode::kSessionNotExist
// StatusCode::KInternalError
message CloseFileResponse {
    required StatusCode statusCode = 1;
}

message ReFreshSessionRequest {
    required string     fileName = 1;
    required string     sessionID = 2;

    required string     owner = 3;
    required uint64     date = 4; //current time
    optional string     signature = 5;
    optional string     clientVersion = 6;
    optional string     clientIP = 7;
    optional uint32     clientPort = 8;
}

// statusCode返回值，详见StatusCode定义:
// StatusCode::kOK
// StatusCode::kFileNotExists
// StatusCode::kStorageError
// StatusCode::kSessionNotExist
message ReFreshSessionResponse {
    required StatusCode statusCode = 1;
    required string     sessionID = 2;
    optional FileInfo   fileInfo = 3;
    optional ProtoSession protoSession = 4;
};


message  CreateCloneFileRequest {
    required string     fileName = 1;
    required FileType   fileType = 2;
    required uint64     fileLength = 3;
    required uint64     seq = 4;
    required uint32     chunksize = 5;
    required string     owner = 6;
    optional string     signature = 7;
    required uint64     date =8;
    required string     cloneSource = 9;
    optional uint64     stripeUnit = 10;
    optional uint64     stripeCount = 11;
    optional string     poolset = 12;
}

message CreateCloneFileResponse {
    required StatusCode statusCode = 1;
    optional FileInfo fileInfo = 2;
}

message SetCloneFileStatusRequest {
    required string     fileName = 1;
    optional uint64     fileID = 2;
    required FileStatus fileStatus = 3;

    required string     owner = 4;
    optional string     signature = 5;
    required uint64     date = 6;
}

message SetCloneFileStatusResponse {
    required StatusCode statusCode = 1;
}

message GetAllocatedSizeRequest {
    required string fileName = 1;
}

message GetAllocatedSizeResponse {
    required StatusCode statusCode = 1;
    // 文件或目录的分配大小
    optional uint64 allocatedSize = 2;
    // key是逻辑池id，value是分配大小
    map<uint32, uint64> allocSizeMap = 3;
}

message GetFileSizeRequest {
    required string fileName = 1;
}

message GetFileSizeResponse {
    required StatusCode statusCode = 1;
    // 文件或目录的file length
    optional uint64 fileSize = 2;
}

message ClientInfo {
    required string ip = 1;
    required uint32 port = 2;
}

message ListClientRequest {
    optional bool listAllClient = 1;
}

message ListClientResponse {
    required StatusCode statusCode = 1;
    repeated ClientInfo clientInfos = 2;
}

message FindFileMountPointRequest {
    required string fileName = 1;
}

message FindFileMountPointResponse {
    required StatusCode statusCode = 1;
    repeated ClientInfo clientInfo = 2;
}

message ListVolumesOnCopysetsRequest {
    repeated common.CopysetInfo copysets = 1;
}

message ListVolumesOnCopysetsResponse {
    required StatusCode statusCode = 1;
    repeated string fileNames = 2;
}

message IncreaseFileEpochRequest {
    required string     fileName = 1;

    required string     owner = 2;
    optional string     signature = 3;
    required uint64     date = 4;
}

message IncreaseFileEpochResponse {
    required StatusCode statusCode = 1;
    optional FileInfo fileInfo = 2;
    repeated common.ChunkServerLocation csLocs = 3;
}

service CurveFSService {
    // basic rpcs
    rpc     CreateFile(CreateFileRequest) returns (CreateFileResponse);
    rpc     DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);
    rpc     RecoverFile(RecoverFileRequest) returns (RecoverFileResponse);
    rpc     GetFileInfo(GetFileInfoRequest) returns (GetFileInfoResponse);
    rpc     GetOrAllocateSegment(GetOrAllocateSegmentRequest)
                returns (GetOrAllocateSegmentResponse);
    rpc     RenameFile(RenameFileRequest) returns (RenameFileResponse);
    rpc     ExtendFile(ExtendFileRequest) returns (ExtendFileResponse);
    rpc     ChangeOwner(ChangeOwnerRequest) returns (ChangeOwnerResponse);
    rpc     ListDir(ListDirRequest) returns (ListDirResponse);
    rpc     IncreaseFileEpoch(IncreaseFileEpochRequest) returns (IncreaseFileEpochResponse);

    // snapshot rpcs
    rpc     CreateSnapShot(CreateSnapShotRequest)
                returns (CreateSnapShotResponse);
    rpc     ListSnapShot(ListSnapShotFileInfoRequest)
            returns (ListSnapShotFileInfoResponse);
    rpc     DeleteSnapShot(DeleteSnapShotRequest)
            returns (DeleteSnapShotResponse);
    rpc     CheckSnapShotStatus(CheckSnapShotStatusRequest)
            returns (CheckSnapShotStatusResponse);
    rpc     GetSnapShotFileSegment(GetOrAllocateSegmentRequest)
                returns (GetOrAllocateSegmentResponse);

    rpc    ProtectSnapShot(ProtectSnapShotRequest)
            returns (ProtectSnapShotResponse);
    rpc    UnprotectSnapShot(UnprotectSnapShotRequest)
            returns (UnprotectSnapShotResponse);

    // local clone rpcs
    rpc     Clone(CloneRequest)
                returns(CloneResponse);
    // flatten
    rpc    Flatten(FlattenRequest) returns (FlattenResponse);
    // query flatten status
    rpc    QueryFlattenStatus(QueryFlattenStatusRequest)
                returns (QueryFlattenStatusResponse);
    // children rpcs
    rpc    Children(ChildrenRequest) returns (ChildrenResponse);

    // session rpcs
    rpc     OpenFile(OpenFileRequest) returns (OpenFileResponse);
    rpc     CloseFile(CloseFileRequest) returns (CloseFileResponse);
    rpc     RefreshSession(ReFreshSessionRequest)
        returns (ReFreshSessionResponse);

    // clone rpcs
    rpc     CreateCloneFile(CreateCloneFileRequest) returns (CreateCloneFileResponse);
    rpc     SetCloneFileStatus(SetCloneFileStatusRequest) returns (SetCloneFileStatusResponse);

    // curve status
    rpc     GetAllocatedSize(GetAllocatedSizeRequest) returns (GetAllocatedSizeResponse);
    rpc     GetFileSize(GetFileSizeRequest) returns (GetFileSizeResponse);
    rpc     ListClient(ListClientRequest) returns (ListClientResponse);
    rpc     FindFileMountPoint(FindFileMountPointRequest) returns (FindFileMountPointResponse);
    rpc     ListVolumesOnCopysets(ListVolumesOnCopysetsRequest) returns (ListVolumesOnCopysetsResponse);
}
