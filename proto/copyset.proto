/*
 *  Copyright (c) 2020 NetEase Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

syntax="proto2";

import "proto/common.proto";

package curve.chunkserver;

option cc_generic_services = true;
option go_package = "proto/copyset";

//Copyset epoch message for epoch serialization and deserialization
message ConfEpoch {
    required uint32 logicPoolId = 1;
    required uint32 copysetId   = 2;
    required uint64 epoch       = 3;
    required uint32 checksum    = 4;
}

message CopysetRequest {
    //LogicPoolId is actually uint16, but proto does not have uint16
    required uint32 logicPoolId = 1;
    required uint32 copysetId = 2;
    repeated string peerid = 3; //The current replication group configuration can be empty
};

enum COPYSET_OP_STATUS {
    COPYSET_OP_STATUS_SUCCESS           = 0;
    COPYSET_OP_STATUS_EXIST             = 1;  //Copyset node already exists
    COPYSET_OP_STATUS_COPYSET_NOTEXIST  = 2;
    COPYSET_OP_STATUS_FAILURE_UNKNOWN   = 3;
    COPYSET_OP_STATUS_COPYSET_IS_HEALTHY = 4;
};

message CopysetResponse {
    optional COPYSET_OP_STATUS status = 1;
    optional string redirect = 2;  //I am not the leader, redirect to the leader
};

message Copyset {
    required uint32 logicPoolId = 1;
    required uint32 copysetId   = 2;
    repeated common.Peer peers  = 3;
}

message CopysetRequest2 {
    repeated Copyset copysets       = 1;
};

message CopysetResponse2 {
    optional COPYSET_OP_STATUS status = 1;
}

message CopysetStatusRequest {
    required uint32 logicPoolId = 1;
    required uint32 copysetId   = 2;
    required common.Peer peer   = 3;
    required bool queryHash     = 4;    //Considering that calculating the copyset hash value is a very time-consuming operation, setting a bool variable can choose not to check
}

//Most fields can only be optional, as the copyset node may not exist
message CopysetStatusResponse {
    required COPYSET_OP_STATUS status       = 1;    //OP status
    optional uint32 state                   = 2;    //Copyset status
    optional common.Peer peer               = 3;    // peer
    optional common.Peer leader             = 4;    // leader
    optional bool readOnly                  = 5;    //Read Only
    optional int64 term                     = 6;    //Current term of office
    optional int64 committedIndex           = 7;    //Current committed index
    optional int64 knownAppliedIndex        = 8;    //The current copyset has a known applied index, but the current peer may not have applied it
    optional int64 pendingIndex             = 9;    //The open op log index starting index for the current replica
    optional int64 pendingQueueSize         = 10;   //The length of the pending op log queue for the current replica
    optional int64 applyingIndex            = 11;   //The current copy is applying the op log index
    optional int64 firstIndex               = 12;   //The first op log index of the current replica (including disk and memory)
    optional int64 lastIndex                = 13;   //The last op log index of the current replica (including disk and memory)
    optional int64 diskIndex                = 14;   //The maximum op log index that the current replica has persisted (excluding memory)
    optional uint64 epoch                   = 15;   //Current copyset configuration version
    optional string hash                    = 16;   //The data hash value of the current copyset
}

service CopysetService {
    rpc CreateCopysetNode (CopysetRequest) returns (CopysetResponse);

    rpc CreateCopysetNode2 (CopysetRequest2) returns (CopysetResponse2);

    rpc DeleteBrokenCopyset(CopysetRequest) returns (CopysetResponse);

    rpc GetCopysetStatus (CopysetStatusRequest) returns (CopysetStatusResponse);
};
