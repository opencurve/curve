*** Settings ***
Library           Resources/keywords/base_operate.py
Library           Resources/test/curve_base_test.py
Library           Resources/swig/swig_operate.py
Library			  Collections
Library           RequestsLibrary
Library           Process
Library           SSHLibrary
Library           Resources/keywords/mythread.py
Suite Setup       init cluster
Suite Teardown    clean env


*** Variables ***
${curve_workspace}		/var/lib/jenkins/workspace/curve/curve_multijob
${chunkserver_start_script}		./deploy/local/chunkserver/start_chunkservers_locally.sh
${chunkserver_stop_script}		./deploy/local/chunkserver/stop_chunkservers_locally.sh
${mds_start}		${curve_workspace}/bazel-bin/src/mds/main/curvemds
${curvefs_tool}		${curve_workspace}/bazel-bin/tools/curvefsTool
${createfile_tool}		${curve_workspace}/bazel-bin/src/tools
${libcurve_workflow}		${curve_workspace}/bazel-bin/test/client/fake/curve_client_workflow
${chunkserver_log_dir}		${curve_workspace}/deploy/local/chunkserver/log/
${mds_ip}		127.0.0.1
${mds_port}		6666
${mds_listen}		"-listenAddr=127.0.0.1:6666"
${snapshot_server_ip}       127.0.0.1
${snapshot_server_port}     55555
${snapshot_server_host}     http://127.0.0.1:55555
${cs_log}		deploy/local/chunkserver/log/
${cluster_map}		./tools/topo_example.txt
${physicalpool_name}		pool1
${physical_op}		create_physicalpool
${copyset_num}		64
${logical_op}		create_logicalpool
${fake_mds_false}		false
${fake_chunkserver_false}		false
${failover_time}    5
${snap}     snaptest


*** Test Cases ***
file base test
    [Tags]    P0    base    first release   no-need
    #[Setup]	init cluster
    workflow base
    log        hello world
    #[Teardown]	    clean env

file read write base test
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    create libcurve file
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    write libcurve file     ${new_fd}
    ${content}      read libcurve file     ${new_fd}
    ${default_content}      get buf
    should be equal as strings      ${content}    ${default_content}
    close libcurve file     ${new_fd}
    [Teardown]	    file clean      ${new_fd}

create file with normal user
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve file with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none


create file with normal user and password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve file with normal user and password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

create file with root user and password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve file with root user and password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

create file with root user and error password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve file with root user and error password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

create file with root user and no password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve file with root user and no password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

create file with no user
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve file with no user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean   none

create dir with normal user
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir
    ${new_fd}       Convert To Integer    ${rc}
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

create dir with normal user and password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user and password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir
    ${new_fd}       Convert To Integer    ${rc}
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

create dir with root user and password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with root user and password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

create dir with root user and error password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with root user and error password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

create dir with root user and no password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with root user and no password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

create dir with no user
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with no user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean   none

open file with normal user
    [Tags]    P0    base    first release
    [Setup]	file init
    ${rc}   open libcurve file with normal user
    ${new_fd}       Convert To Integer    ${rc}
    #${expect_rc}    evaluate    int(0)
    #should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      ${new_fd}


open file with normal user and password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   open libcurve file with normal user and password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(1)
    #should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      ${new_fd}

open file with root user and password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   open libcurve file with root user and password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(1)
    #should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      ${new_fd}

open file with root user and error password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   open libcurve file with root user and error password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-2)
    should be equal      ${rc}       ${expect_rc}
    close libcurve file     ${new_fd}
    [Teardown]	    file clean      ${new_fd}

open file with root user and no password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   open libcurve file with root user and no password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-2)
    should be equal      ${rc}       ${expect_rc}
    close libcurve file     ${new_fd}
    [Teardown]	    file clean      ${new_fd}

open file with error user
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   open libcurve file with error user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-2)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

open file with error user and root password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   open libcurve file with error user and root password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-2)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

open file with no user
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   open libcurve file with no user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-1)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

extend file with normal user
    [Tags]    P0    base    first release
    [Setup]	file init
    ${rc}   extend libcurve file with normal user
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none


extend file with normal user and password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   extend libcurve file with normal user and password
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

extend file with root user and password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   extend libcurve file with root user and password
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

extend file with root user and error password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   extend libcurve file with root user and error password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

extend file with root user and no password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   extend libcurve file with root user and no password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

extend file with error user
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   extend libcurve file with error user
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

extend file with error user and root password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   extend libcurve file with error user and root password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

extend file with no user
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   extend libcurve file with no user
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

rename file with normal user
    [Tags]    P0    base    first release   lzw
    #[Setup]	file init
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc_base}   statfs libcurve dir
    ${origin_file}    evaluate     str("/lzw/1")
    ${new_file}     evaluate    str("/lzw/2")
    ${rc}   create libcurve file        ${origin_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   rename libcurve file with normal user
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none


rename file with normal user and password
    [Tags]    P0    base    first release   lzw
    #[Setup]	file init
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc_base}   statfs libcurve dir
    ${origin_file}    evaluate     str("/lzw/1")
    ${new_file}     evaluate    str("/lzw/2")
    ${rc}   create libcurve file        ${origin_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    #create libcurve file
    ${rc}   rename libcurve file with normal user and password
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve file    ${new_file}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

rename file with root user and password
    [Tags]    P0    base    first release   lzw
    [Setup]	file init
    #create libcurve file
    ${rc}   rename libcurve file with root user and password
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

rename file with root user and error password
    [Tags]    P0    base    first release   lzw
    [Setup]	file init
    #create libcurve file
    ${rc}   rename libcurve file with root user and error password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

rename file with root user and no password
    [Tags]    P0    base    first release   lzw
    [Setup]	file init
    #create libcurve file
    ${rc}   rename libcurve file with root user and no password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

rename file with error user
    [Tags]    P0    base    first release   lzw
    [Setup]	file init
    #create libcurve file
    ${rc}   rename libcurve file with error user
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

rename file with error user and root password
    [Tags]    P0    base    first release   lzw
    [Setup]	file init
    #create libcurve file
    ${rc}   rename libcurve file with error user and root password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

rename file with no user
    [Tags]    P0    base    first release   lzw
    [Setup]	file init
    #create libcurve file
    ${rc}   rename libcurve file with no user
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete file with normal user
    [Tags]    P0    base    first release
    [Setup]	file init
    ${rc}   delete libcurve file with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none


delete file with normal user and password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   delete libcurve file with normal user and password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

delete file with root user and password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   delete libcurve file with root user and password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

delete file with root user and error password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   delete libcurve file with root user and error password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

delete file with root user and no password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   delete libcurve file with root user and no password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

delete file with error user
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   delete libcurve file with error user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete file with error user and root password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   delete libcurve file with error user and root password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete file with no user
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   delete libcurve file with no user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete dir with normal user
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete dir with normal user and password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir with normal user and password
    ${new_fd}       Convert To Integer    ${rc}
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete dir with root user and password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir with root user and password
    ${new_fd}       Convert To Integer    ${rc}
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete dir with root user and error password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir with root user and error password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete dir with root user and no password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir with root user and no password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete dir with error user
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir with error user
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete dir with error user and root password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir with error user and root password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete dir with no user
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir with no user
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

statfs file with normal user
    [Tags]    P0    base    first release
    [Setup]	file init
    ${rc}   statfs libcurve file with normal user
    ${expect_rc}    evaluate    int(10737418240)
    should be equal      ${rc.length}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none


statfs file with normal user and password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   statfs libcurve file with normal user and password
    ${expect_rc}    evaluate    int(10737418240)
    should be equal      ${rc.length}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

statfs file with root user and password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   statfs libcurve file with root user and password
    ${expect_rc}    evaluate    int(10737418240)
    should be equal      ${rc.length}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

statfs file with root user and error password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   statfs libcurve file with root user and error password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

statfs file with root user and no password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   statfs libcurve file with root user and no password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

statfs file with error user
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   statfs libcurve file with error user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

statfs file with error user and root password
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   statfs libcurve file with error user and root password
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

statfs file with no user
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   statfs libcurve file with no user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

statfs dir with normal user
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve dir with normal user
    should be equal      ${rc.length}       ${expect_rc}
    [Teardown]	    file clean      none

statfs dir with normal user and password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve dir with normal user and password
    should be equal      ${rc.length}       ${expect_rc}
    [Teardown]	    file clean      none

statfs dir with root user and password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve dir with root user and password
    should be equal      ${rc.length}       ${expect_rc}
    [Teardown]	    file clean      none

statfs dir with root user and error password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve dir with root user and error password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

statfs dir with root user and no password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve dir with root user and no password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

statfs dir with error user
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve dir with error user
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

statfs dir with error user and root password
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve dir with error user and root password
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

statfs dir with no user
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve dir with no user
    ${expect_rc}    evaluate    int(-4)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

open file test
    [Tags]    P0    base    first release
    [Setup]	file init
    ${rc}   open libcurve file with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(0)
    #should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve file with normal user
    ${expect_rc}    evaluate    int(10737418240)
    should be equal      ${rc.length}       ${expect_rc}
    ${expect_parentid}    evaluate    int(0)
    should be equal     ${rc.parentid}      ${expect_parentid}
    ${expect_filetype}    evaluate    int(1)
    should be equal     ${rc.filetype}     ${expect_filetype}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      ${new_fd}

create file when parent is not exsit
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve file when parent is not exist
    ${expect_rc}    evaluate    int(-6)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

create file when parent is exsit
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc_base}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc_base}       ${expect_rc}
    ${rc_file}   statfs libcurve dir
    ${rc}   create libcurve file when parent is exist
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${expect_file}    evaluate    str("/lzw/1")
    ${rc}   statfs libcurve file        ${expect_file}
    ${expect_rc}    evaluate    int(10737418240)
    should be equal      ${rc.length}       ${expect_rc}
    should be equal     ${rc.parentid}      ${rc_file.id}
    ${expect_filetype}    evaluate    int(1)
    should be equal     ${rc.filetype}     ${expect_filetype}
    ${rc}   delete libcurve file     ${expect_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

create dir when parent is exsit
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc_base}   statfs libcurve dir
    ${rc}   create libcurve dir when parent is exist
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${expect_dir}    evaluate    str("/lzw/test")
    ${rc}   statfs libcurve file        ${expect_dir}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc.length}       ${expect_rc}
    should be equal     ${rc.parentid}      ${rc_base.id}
    ${expect_filetype}    evaluate    int(0)
    should be equal     ${rc.filetype}     ${expect_filetype}
    ${rc}   delete libcurve dir     ${expect_dir}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete not exsit file
    [Tags]    P0    base    first release
    ${rc}   delete libcurve file
    ${expect_rc}    evaluate    int(-6)
    should be equal      ${rc}       ${expect_rc}

delete not exsit dir
    [Tags]    P0    base    first release
    ${rc}   delete libcurve file
    ${expect_rc}    evaluate    int(-6)
    should be equal      ${rc}       ${expect_rc}

delete not empty dif
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc_base}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc_base}       ${expect_rc}
    ${rc_file}   statfs libcurve dir
    ${rc}   create libcurve file when parent is exist
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${expect_file}    evaluate    str("/lzw/1")
    ${rc}   statfs libcurve file        ${expect_file}
    ${expect_rc}    evaluate    int(10737418240)
    should be equal      ${rc.length}       ${expect_rc}
    should be equal     ${rc.parentid}      ${rc_file.id}
    ${expect_filetype}    evaluate    int(1)
    should be equal     ${rc.filetype}     ${expect_filetype}
    ${rc}   delete libcurve dir
    ${expect_rc}    evaluate    int(-12)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve file    ${expect_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

extend file test
    [Tags]    P0    base    first release
    [Setup]	file init
    #create libcurve file
    ${rc}   extend libcurve file
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve file
    ${expect_rc}    evaluate    int(21474836480)
    should be equal      ${rc.length}       ${expect_rc}
    ${expect_filetype}    evaluate    int(1)
    should be equal     ${rc.filetype}     ${expect_filetype}
    [Teardown]	    file clean      none

extend when file is not exist
    [Tags]    P0    base    first release
    [Setup]	file init
    ${expect_file}    evaluate    str("/aaa")
    ${rc}   extend libcurve file    ${expect_file}
    ${expect_rc}    evaluate    int(-6)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

extend when file is equal with origin
    [Tags]    P0    base    first release
    [Setup]	file init
    ${expect_file}    evaluate     str("/1")
    ${expect_size}    evaluate    int(10737418240)
    ${expect_user}    evaluate      str("userinfo")
    ${rc}   extend libcurve file    ${expect_file}      ${expect_user}      ${expect_size}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

extend when file is small than origin
    [Tags]    P0    base    first release
    #[Setup]	file init
    ${origin_file}    evaluate     str("/1")
    ${origin_size}    evaluate    int(21474836480)
    ${expect_size}    evaluate    int(10737418240)
    ${origin_user}    evaluate      str("userinfo")
    ${rc}   create libcurve file    ${origin_file}      ${origin_user}      ${origin_size}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   extend libcurve file    ${origin_file}      ${origin_user}      ${expect_size}
    ${expect_rc}    evaluate    int(-13)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

extend dir test
    [Tags]    P0    base    first release
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   extend libcurve file    ${origin_dir}
    ${expect_rc}    evaluate    int(-11)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

open dir test
    [Tags]    P0    base    first release   no-need
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   open libcurve file    ${origin_dir}
    ${expect_rc}    evaluate    int(-11)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

close not open file test
    [Tags]    P0    base    first release
    ${origin_file}    evaluate     str("/1")
    ${rc}   create libcurve file
    ${expect_rc}    evaluate    int(0)
    ${close_file}    evaluate    int(10)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   close libcurve file    ${close_file}
    ${expect_rc}    evaluate    int(-2)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

close when file is not exsit
    [Tags]    P0    base    first release
    ${origin_file}    evaluate     str("/1")
    ${close_file}    evaluate    int(200)
    ${rc}   close libcurve file    ${close_file}
    ${expect_rc}    evaluate    int(-2)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

open file when file is already opened
    [Tags]    P0    base    first release
    ${origin_file}    evaluate     str("/1")
    ${expect_rc}    evaluate    int(0)
    ${rc}   create libcurve file
    should be equal      ${rc}       ${expect_rc}
    ${rc_first}   open libcurve file    ${origin_file}
    ${rc}   open libcurve file    ${origin_file}
    ${expect_rc}    evaluate    int(-2)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      ${rc_first}

close file when file is already closed
    [Tags]    P0    base    first release
    ${origin_file}    evaluate     str("/1")
    ${expect_rc}    evaluate    int(0)
    ${rc}   create libcurve file
    should be equal      ${rc}       ${expect_rc}
    ${rc}   open libcurve file    ${origin_file}
    ${rc}   close libcurve file    ${rc}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}      ${expect_rc}
    ${rc}   close libcurve file    ${rc}
    ${expect_rc}    evaluate    int(-2)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

open close file multi times
    [Tags]    P0    base    first release
    ${origin_file}    evaluate     str("/1")
    ${expect_rc}    evaluate    int(0)
    ${rc}   create libcurve file
    should be equal      ${rc}       ${expect_rc}
    ${rc_first}   open libcurve file    ${origin_file}
    ${rc}   close libcurve file    ${rc_first}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc_second}   open libcurve file    ${origin_file}
    ${rc}   close libcurve file    ${rc_second}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc_third}   open libcurve file    ${origin_file}
    ${new_fd}       Convert To Integer    ${rc_third}
    write libcurve file     ${new_fd}
    ${content}      read libcurve file     ${new_fd}
    ${default_content}      get buf
    should be equal as strings      ${content}    ${default_content}
    ${rc}   close libcurve file    ${new_fd}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      ${rc_third}

extend file multi times
    [Tags]    P0    base    first release
    ${origin_file}    evaluate     str("/1")
    ${expect_rc}    evaluate    int(0)
    ${rc}   create libcurve file
    should be equal      ${rc}       ${expect_rc}
    ${rc_first}   extend libcurve file
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc_first}       ${expect_rc}
    ${origin_user}    evaluate      str("userinfo")
    ${origin_size}    evaluate    int(10737418240)
    ${second_size}    evaluate    int(21474836480)
    ${third_size}    evaluate    int(32212254720)
    ${rc_second}   extend libcurve file     ${origin_file}      ${origin_user}      ${second_size}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc_second}       ${expect_rc}
    ${rc_third}   extend libcurve file      ${origin_file}      ${origin_user}      ${third_size}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc_third}       ${expect_rc}
    ${rc_open}   open libcurve file    ${origin_file}
    ${new_fd}       Convert To Integer    ${rc_open}
    write libcurve file     ${new_fd}
    ${content}      read libcurve file     ${new_fd}
    ${default_content}      get buf
    should be equal as strings      ${content}    ${default_content}
    ${rc}   close libcurve file    ${new_fd}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      ${rc_open}

rename root file test
    [Tags]    P0    base    first release
    [Setup]	file init
    ${origin_file}    evaluate     str("/1")
    ${new_file}     evaluate    str("/2")
    ${rc}   rename libcurve file    ${origin_file}      ${new_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

rename root file with root user
    [Tags]    P0    base    first release
    [Setup]	file init
    ${origin_file}    evaluate     str("/1")
    ${new_file}     evaluate    str("/2")
    ${root_user}    evaluate    str("root")
    ${root_password}    evaluate  str("root_password")
    ${rc}   rename libcurve file    ${origin_file}      ${new_file}     ${root_user}    ${root_password}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve file    ${new_file}     ${root_user}    ${root_password}
    [Teardown]	    file clean      none

rename file with normal user test
    [Tags]    P0    base    first release
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc_base}   statfs libcurve dir
    ${origin_file}    evaluate     str("/lzw/1")
    ${new_file}     evaluate    str("/lzw/2")
    ${rc}   create libcurve file        ${origin_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   rename libcurve file    ${origin_file}      ${new_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve file    ${new_file}
    ${expect_rc}    evaluate    int(10737418240)
    should be equal      ${rc.length}       ${expect_rc}
    ${expect_filetype}    evaluate    int(1)
    should be equal     ${rc.filetype}     ${expect_filetype}
    should be equal     ${rc.parentid}     ${rc_base.id}
    ${rc}   delete libcurve file    ${new_file}
    [Teardown]	    file clean      none

rename root dir test
    [Tags]    P0    base    first release
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${new_dir}     evaluate    str("/2")
    ${expect_rc}    evaluate    int(0)
    ${rc}   rename libcurve file    ${origin_dir}      ${new_dir}
    ${expect_rc}    evaluate    int(-11)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

rename root dir with root user
    [Tags]    P0    base    first release   lzw1    no-need
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${new_dir}     evaluate    str("/2")
    ${root_user}    evaluate    str("root")
    ${root_password}    evaluate  str("root_password")
    ${expect_rc}    evaluate    int(0)
    ${rc}   rename libcurve file    ${origin_dir}      ${new_dir}   ${root_user}    ${root_password}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   delete libcurve dir     ${new_dir}      ${root_user}    ${root_password}
    [Teardown]	    file clean      none

rename dir with normal user test
    [Tags]    P0    base    first release    no-need
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc_base}   statfs libcurve dir
    ${origin_dir}    evaluate     str("/lzw/1")
    ${new_dir}     evaluate    str("/lzw/2")
    ${rc}   create libcurve dir        ${origin_dir}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   rename libcurve file    ${origin_dir}      ${new_dir}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve dir    ${new_dir}
    ${expect_rc}    evaluate    int(10737418240)
    should be equal      ${rc.length}       ${expect_rc}
    ${expect_filetype}    evaluate    int(1)
    should be equal     ${rc.filetype}     ${expect_filetype}
    should be equal     ${rc.parentid}     ${rc_base.id}
    ${rc}   delete libcurve dir     ${new_dir}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none


extend file when file is open
    [Tags]    P0    base    first release
    ${origin_file}    evaluate     str("/1")
    ${expect_rc}    evaluate    int(0)
    ${rc}   create libcurve file
    should be equal      ${rc}       ${expect_rc}
    ${rc_first}   open libcurve file    ${origin_file}
    ${rc}       extend libcurve file
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve dir    ${origin_file}
    ${expect_length}    evaluate    int(21474836480)
    should be equal      ${rc.length}       ${expect_length}
    ${expect_filetype}    evaluate    int(1)
    should be equal     ${rc.filetype}     ${expect_filetype}
    ${expect_parentid}    evaluate    int(0)
    should be equal     ${rc.parentid}     ${expect_parentid}
    ${new_fd}       Convert To Integer    ${rc_first}
    write libcurve file     ${new_fd}
    ${content}      read libcurve file     ${new_fd}
    ${default_content}      get buf
    should be equal as strings      ${content}    ${default_content}
    ${rc}       close libcurve file     ${rc_first}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      ${rc_first}

rename file when file is open
    [Tags]    P0    base    first release
    ${origin_file}    evaluate     str("/1")
    ${expect_rc}    evaluate    int(0)
    ${rc}   create libcurve file
    should be equal      ${rc}       ${expect_rc}
    ${rc_first}   open libcurve file    ${origin_file}
    ${rc}       rename libcurve file
    ${expect_rc}    evaluate    int(-15)
    should be equal      ${rc}       ${expect_rc}
    ${rc}       close libcurve file     ${rc_first}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      ${rc_first}

delete file when file is open
    [Tags]    P0    base    first release
    ${origin_file}    evaluate     str("/1")
    ${expect_rc}    evaluate    int(0)
    ${rc}   create libcurve file
    should be equal      ${rc}       ${expect_rc}
    ${rc_first}   open libcurve file    ${origin_file}
    ${rc}       delete libcurve file
    ${expect_rc}    evaluate    int(-15)
    should be equal      ${rc}       ${expect_rc}
    ${rc}       close libcurve file     ${rc_first}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      ${rc_first}

delete file when file is not exsit
    [Tags]    P0    base    first release
    ${rc}       delete libcurve file
    ${expect_rc}    evaluate    int(-6)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

delete dir when dir is not exsit
    [Tags]    P0    base    first release
    ${rc}       delete libcurve dir
    ${expect_rc}    evaluate    int(-6)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

close file when file is not exsit
    [Tags]    P0    base    first release
    ${fd}   evaluate    int(100)
    ${rc}       close libcurve file     ${fd}
    ${expect_rc}    evaluate    int(-2)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none

create file less than 10g
    [Tags]    P0    base    first release
    #[Setup]	file init
    ${rc}       create libcurve file less than 10g with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-17)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      ${new_fd}

create file more than 5t
    [Tags]    P0    base    first release       no-need
    #[Setup]	file init
    ${rc}       create libcurve file more than 5t with normal user
    ${new_fd}       Convert To Integer    ${rc}
    ${expect_rc}    evaluate    int(-17)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      ${new_fd}

create dir test
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir with normal user
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve dir with normal user
    should be equal      ${rc.length}       ${expect_rc}
    ${expect_parentid}    evaluate    int(0)
    should be equal     ${rc.parentid}      ${expect_parentid}
    ${expect_filetype}    evaluate    int(0)
    should be equal     ${rc.filetype}     ${expect_filetype}
    #close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

create dir when parent is not exsit
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    ${rc}   create libcurve dir when parent is not exist
    ${expect_rc}    evaluate    int(-6)
    [Teardown]	    file clean      none

rename file when dest file is exsit
    [Tags]    P0    base    first release
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc_base}   statfs libcurve dir
    ${origin_file}    evaluate     str("/lzw/1")
    ${new_file}     evaluate    str("/lzw/2")
    ${rc}   create libcurve file        ${origin_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   create libcurve file        ${new_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   rename libcurve file    ${origin_file}      ${new_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve file    ${new_file}
    ${expect_rc}    evaluate    int(10737418240)
    should be equal      ${rc.length}       ${expect_rc}
    ${expect_filetype}    evaluate    int(1)
    should be equal     ${rc.filetype}     ${expect_filetype}
    should be equal     ${rc.parentid}     ${rc_base.id}
    ${rc}   delete libcurve file    ${new_file}
    [Teardown]	    file clean      none

rename file when dest file has data
    [Tags]    P0    base    first release
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc_base}   statfs libcurve dir
    ${origin_file}    evaluate     str("/lzw/1")
    ${new_file}     evaluate    str("/lzw/2")
    ${rc}   create libcurve file        ${origin_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   create libcurve file        ${new_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${fd}   open libcurve file      ${new_file}
    ${new_fd}       Convert To Integer    ${fd}
    write libcurve file     ${new_fd}
    ${content}      read libcurve file     ${new_fd}
    ${default_content}      get buf
    should be equal as strings      ${content}    ${default_content}
    close libcurve file     ${new_fd}
    ${rc}   rename libcurve file    ${origin_file}      ${new_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve file    ${new_file}
    ${expect_rc}    evaluate    int(10737418240)
    should be equal      ${rc.length}       ${expect_rc}
    ${expect_filetype}    evaluate    int(1)
    should be equal     ${rc.filetype}     ${expect_filetype}
    should be equal     ${rc.parentid}     ${rc_base.id}
    ${rc}   delete libcurve file    ${new_file}
    [Teardown]	    file clean      none

rename file when dest file is open
    [Tags]    P0    base    first release
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc_base}   statfs libcurve dir
    ${origin_file}    evaluate     str("/lzw/1")
    ${new_file}     evaluate    str("/lzw/2")
    ${rc}   create libcurve file        ${origin_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   create libcurve file        ${new_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${fd}   open libcurve file      ${new_file}
    ${new_fd}       Convert To Integer    ${fd}
    ${rc}   rename libcurve file    ${origin_file}      ${new_file}
    ${expect_rc}    evaluate    int(-15)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve file    ${origin_file}
    ${expect_rc}    evaluate    int(10737418240)
    should be equal      ${rc.length}       ${expect_rc}
    ${expect_filetype}    evaluate    int(1)
    should be equal     ${rc.filetype}     ${expect_filetype}
    should be equal     ${rc.parentid}     ${rc_base.id}
    ${rc}   close libcurve file     ${new_fd}
    ${rc}   delete libcurve file    ${origin_file}
    [Teardown]	    file clean      ${new_fd}

rename file when origin file is open
    [Tags]    P0    base    first release
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc_base}   statfs libcurve dir
    ${origin_file}    evaluate     str("/lzw/1")
    ${new_file}     evaluate    str("/lzw/2")
    ${rc}   create libcurve file        ${origin_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   create libcurve file        ${new_file}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${fd}   open libcurve file      ${origin_file}
    ${new_fd}       Convert To Integer    ${fd}
    ${rc}   rename libcurve file    ${origin_file}      ${new_file}
    ${expect_rc}    evaluate    int(-15)
    should be equal      ${rc}       ${expect_rc}
    ${rc}   statfs libcurve file    ${origin_file}
    ${expect_rc}    evaluate    int(10737418240)
    should be equal      ${rc.length}       ${expect_rc}
    ${expect_filetype}    evaluate    int(1)
    should be equal     ${rc.filetype}     ${expect_filetype}
    should be equal     ${rc.parentid}     ${rc_base.id}
    ${rc}   close libcurve file     ${new_fd}
    ${rc}   delete libcurve file    ${origin_file}
    [Teardown]	    file clean      ${new_fd}

rename file when origin file is not exsit
    [Tags]    P0    base    first release
    ${origin_dir}    evaluate     str("/lzw")
    ${rc}   create libcurve dir
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${rc_base}   statfs libcurve dir
    ${origin_file}    evaluate     str("/lzw/1")
    ${new_file}     evaluate    str("/lzw/2")
    ${rc}   rename libcurve file    ${origin_file}      ${new_file}
    ${expect_rc}    evaluate    int(-6)
    should be equal      ${rc}       ${expect_rc}
    [Teardown]	    file clean      none


overwrite file
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    create libcurve file
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${expect_buf}    evaluate    str("a"*4096)
    write libcurve file     ${new_fd}  ${expect_buf}
    ${content}      read libcurve file     ${new_fd}
    log     ${content}
    should be equal as strings      ${content}    ${expect_buf}
    ${new_buf}    evaluate    str("b"*4096)
    write libcurve file     ${new_fd}  ${new_buf}
    ${content}      read libcurve file     ${new_fd}
    log     ${content}
    should be equal as strings      ${content}    ${new_buf}
#    close libcurve file     ${new_fd}
    [Teardown]	    file clean    ${new_fd}

read write append
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    create libcurve file
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${expect_buf}    evaluate    str("a"*4096)
    write libcurve file     ${new_fd}  ${expect_buf}
    ${new_buf}    evaluate    str("b"*4096)
    write libcurve file     ${new_fd}  ${new_buf}   4096  4096
    ${content}      read libcurve file     ${new_fd}
    should be equal as strings      ${content}    ${expect_buf}
    ${buf}   evaluate       str("")
    ${append_content}      read libcurve file    ${new_fd}   ${buf}   4096  4096
    should be equal as strings    ${append_content}    ${new_buf}
    close libcurve file     ${new_fd}
    [Teardown]	    file clean      none

read write offset > size
    [Tags]    P0    base    first release
    #[Setup]	init cluster
    create libcurve file
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${ret}   write libcurve file error   ${new_fd}   offset=10737418240
    ${new_ret}   evaluate       str(${ret})
    should be equal as strings    ${new_ret}   -2
    ${buf}   evaluate       str("")
    ${ret}   read libcurve file    ${new_fd}  ${buf}  offset=10737418240
    ${new_ret}   evaluate       str(${ret})
    should be equal as strings    ${new_ret}   -2
    close libcurve file     ${new_fd}
    [Teardown]	    file clean     ${new_fd}

read write offset + lenght > size
    [Tags]    P0    base    first release
    [Setup]	file init
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${ret}   write libcurve file error   ${new_fd}   offset=10737414144  length=8192
    ${new_ret}   evaluate       str(${ret})
    should be equal as strings    ${new_ret}   -2
    ${buf}   evaluate       str("")
    ${ret}   read libcurve file    ${new_fd}  ${buf}  offset=10737414144   length=8192
    ${new_ret}   evaluate       str(${ret})
    should be equal as strings    ${new_ret}   -2
#    close libcurve file     ${new_fd}
    [Teardown]	    file clean     ${new_fd}

read write offset + lenght = size
    [Tags]    P0    base    first release
    [Setup]	file init
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${ret}   write libcurve file error   ${new_fd}   offset=10737414144  length=4096
    ${new_ret}   evaluate       str(${ret})
    should be equal as strings    ${new_ret}   4096
    ${buf}   evaluate       str("")
    ${content}   read libcurve file    ${new_fd}  ${buf}  offset=10737414144   length=4096
    ${default_content}      get buf
    should be equal as strings      ${content}    ${default_content}
#    close libcurve file     ${new_fd}
    [Teardown]	    file clean     ${new_fd}


read write with extend file
    [Tags]    P0    base    first release
    [Setup]	file init
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${thread}   background loop write file   ${new_fd}
    sleep  1
    check write isalive    ${thread}
    extend libcurve file
    sleep  3
    stop write
    wait thread  ${thread}
    check loop read   ${new_fd}
#    close libcurve file     ${new_fd}
    [Teardown]	    file clean      ${new_fd}

read write with close file
    [Tags]    P0    base    first release
    [Setup]	file init
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${thread}   background loop write file noassert   ${new_fd}
    sleep  1
    check write isalive    ${thread}
    ${rc}   close libcurve file     ${new_fd}
    ${expect_rc}    evaluate    int(0)
    should be equal    ${rc}   ${expect_rc}
    check write isalive    ${thread}
    stop write
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    wait thread  ${thread}
    check loop read   ${new_fd}
    [Teardown]	    file clean      ${new_fd}

read write iosize 512
    [Tags]    P0    base    first release
    [Setup]	file init
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${rc}    write libcurve file error   ${new_fd}    length=512
    ${expect_rc}    evaluate    int(-22)
    should be equal    ${rc}   ${expect_rc}
    ${rc}    read libcurve file   ${new_fd}   length=512
    ${expect_rc}    evaluate    int(-22)
    should be equal    ${rc}   ${expect_rc}
    [Teardown]	    file clean      ${new_fd}


read write with create same file
    [Tags]    P0    base    first release
    [Setup]	file init
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${thread}   background loop write file   ${new_fd}
    sleep  1
    check write isalive    ${thread}
    ${rc}   create libcurve file
    ${expect_rc}    evaluate    int(-1)
    should be equal    ${rc}   ${expect_rc}
    sleep  3
    stop write
    wait thread  ${thread}
    check loop read   ${new_fd}
    [Teardown]	    file clean      ${new_fd}

read write with delete file
    [Tags]    P0    base    first release
    [Setup]	file init
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${thread}   background loop write file   ${new_fd}
    sleep  1
    check write isalive    ${thread}
    ${rc}   delete libcurve file
    ${expect_rc}    evaluate    int(-15)
    should be equal    ${rc}   ${expect_rc}
    sleep   3
    stop write
    wait thread  ${thread}
    check loop read   ${new_fd}
    [Teardown]	    file clean      ${new_fd}

read write iosize 512
    [Tags]    P0    base    first release
    [Setup]	file init
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${rc}    write libcurve file error   ${new_fd}    length=512
    ${expect_rc}    evaluate    int(-22)
    should be equal    ${rc}   ${expect_rc}
    ${rc}    read libcurve file   ${new_fd}   length=512
    ${expect_rc}    evaluate    int(-22)
    should be equal    ${rc}   ${expect_rc}
    [Teardown]	    file clean      ${new_fd}

read write iosize 1k
    [Tags]    P0    base    first release
    [Setup]	file init
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${rc}    write libcurve file error   ${new_fd}    length=1024
    ${expect_rc}    evaluate    int(-22)
    should be equal    ${rc}   ${expect_rc}
    ${rc}    read libcurve file   ${new_fd}   length=1024
    ${expect_rc}    evaluate    int(-22)
    should be equal    ${rc}   ${expect_rc}
    [Teardown]	    file clean      ${new_fd}

read write iosize not 4k alignment
    [Tags]    P0    base    first release
    [Setup]	file init
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${rc}    write libcurve file error   ${new_fd}    length=4095
    ${expect_rc}    evaluate    int(-22)
    should be equal    ${rc}   ${expect_rc}
    ${rc}    read libcurve file    ${new_fd}    length=4095
    ${expect_rc}    evaluate    int(-22)
    should be equal    ${rc}   ${expect_rc}
    [Teardown]	    file clean      ${new_fd}

read write with different io size
    [Tags]    P0    base    first release
    [Setup]	file init
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    loop read write file with different iosize   ${new_fd}
    [Teardown]	    file clean      ${new_fd}


mult thread to create delete dir
    [Tags]    P0    base    first release
#    [Setup]	file clean
    ${num}   evaluate   int(100)
    sleep   3
    mult thread    create_libcurve_dir    ${num}
    mult thread    delete_libcurve_dir   ${num}
    [Teardown]	    file clean      none

mult thread to create delete file
    [Tags]    P0    base    first release
#    [Setup]	file init
    ${num}   evaluate   int(100)
    mult thread   create_libcurve_file    ${num}
    mult thread   statfs_libcurve_file   ${num}
    mult thread   delete_libcurve_file   ${num}
    [Teardown]	    file clean     none

mult thread to open close file
    [Tags]    P0    base    first release
#    [Setup]	file init
    ${num}   evaluate   int(100)
    mult thread   create_libcurve_file    ${num}
    mult thread   statfs_libcurve_file   ${num}
    ${results}    mult thread   open_libcurve_file   ${num}
    mult thread close file   ${results}  ${num}
    mult thread   delete_libcurve_file   ${num}
    [Teardown]	    file clean     none

create delete multilevel dir
    [Tags]    P0    base    first release
    ${num}   evaluate   int(100)
    create multi dir  ${num}
    delete multi dir  ${num}
    [Teardown]	    file clean     none

create max file
    [Tags]    P0    base    first release
    ${origin_dir}    evaluate     str("/cyh")
    ${rc}   create libcurve dir   ${origin_dir}
    ${expect_rc}    evaluate    int(0)
    should be equal      ${rc}       ${expect_rc}
    ${num}   evaluate   int(10000)
    mult thread   create_libcurve_file   ${num}  ${origin_dir}
    mult thread   statfs_libcurve_file   ${num}  ${origin_dir}
    mult thread   delete_libcurve_file   ${num}  ${origin_dir}
    [Teardown]	    file clean     none

random combination thrasher
    [Tags]    P0    base    first release
    create libcurve file with normal user
    ${fd}   open libcurve file
    ${new_fd}       Convert To Integer    ${fd}
    ${thread}   background loop write file   ${new_fd}
    check write isalive    ${thread}
    thrasher   ${new_fd}
    stop write
    wait thread  ${thread}
    check loop read   ${new_fd}
    [Teardown]	    file clean     ${new_fd}

analysis copyset scatterwith
    [Tags]    P0    base    first release
    get copyset table
    mv copyset table
    get copyset scatterwith
    [Teardown]	    rm copyset table

snapshot test
    [Tags]    P1    base    first release   snapshot    no-need
    [Setup]	init cluster
    create default file
    create snapshot
	wait until keyword succeeds  500     2       get snapshot info should be true
	delete snapshot
    [Teardown]	    clean env


failover demo
    [Tags]    P100     failover     no-need
    [Setup]	file init
    background loop write file
    kill one chunkserver
    sleep   2
    start chunkserver
    ${rc}   wait for process   loop write file      timeout=42 secs
    Process Should Be Running
    Should Be Equal	    ${rc}	    ${NONE}
    terminate all processes
    [Teardown]	    file clean  ${file_fd}


*** Keywords ***
file init
    ${expect_rc}    evaluate    int(0)
    ${rc}   create libcurve file
    should be equal      ${rc}       ${expect_rc}


file clean
    [Arguments]    ${fd}
    run keyword if  "${fd}"!="none"   close libcurve file     ${fd}
    ${origin_dir}   evaluate   str("/lzw/1")
    ${new_dir}      evaluate   str("/lzw/2")
    Run Keyword And Ignore Error    delete libcurve dir     ${origin_dir}
    Run Keyword And Ignore Error    delete libcurve dir     ${new_dir}
    Run Keyword And Ignore Error    delete libcurve file with root user and password
    Run Keyword And Ignore Error    delete libcurve dir with root user and password



init cluster
     Run Keyword And Ignore Error   drop mds table
     #drop snap clone table
     Run Keyword And Ignore Error   clean cs data
     Run Keyword And Ignore Error   clean etcd data
	 #start mds if not started
	 #check mds should be exsits
	 #clean db
	 stop mds if started
	 kill mds
	 stop chunkserver if started
	 check chunkserver should not be exsits
	 #chunkserver log create
	 stop snapshot server if started
	 check snapshot server should not be exsits
	 stop etcd if started
	 check etcd should not be exsits
	 clean cs data
	 clean etcd data
	 start services

clean env
     libcurve uninit
	 Run Keyword And Ignore Error   clean db
	 Run Keyword And Ignore Error   drop mds table
	 #drop snap clone table
	 kill mds
	 stop chunkserver if started
	 clean cs data
	 clean etcd data
	 stop snapshot server if started
	 #cat chunkserver log 		chunkserver.log.0
	 #cat chunkserver log 		chunkserver.log.1
	 #cat chunkserver log 		chunkserver.log.2


get every write time
     ${time_start}      get time
     ${fd}   open libcurve file
     ${new_fd}       Convert To Integer    ${fd}
     set test variable  ${file_fd}      ${new_fd}
     write libcurve file     ${new_fd}
     ${time_end}        get time
     ${time_spend}        Evaluate    ${time_end}-${time_start}
     should be true     ${time_spend}<${failover_time}

start snapshot if not start
     ${result}    	check process exsits    snapshot
	 Run Keyword If		'${result}' != '0'    start snapshot server with sleep

start snapshot server with sleep
     start snapshot server
	 Sleep		2s

start etcd if not start
     ${result}    	check process exsits    etcd
	 Run Keyword If		'${result}' != '0'    start etcd with sleep

start etcd with sleep
     start etcd
	 Sleep		2s

start services
	 start etcd if not start
         start mds if not started
	 check mds should be exsits
	 create physical pool should success
	 start chunkserver
	 Sleep		2s
	 check chunkserver should be exsits
	 #start snapshot if not start
	 #check snapshot server should be exsits
	 start etcd if not start
	 check etcd should be exsits
	 #create physical pool should success
	 sleep  3
	 create logicalpool with sleep

create logicalpool with sleep
	 create logicalpool		${copyset_num}		${mds_port}		${physicalpool_name} 		${logical_op}
	 Sleep 		3s
	 check_copyset_num      64

snapshot workflow base
     start services
     create logicalpool with sleep
	 create libcurve file

create snapshot
     create session         snapshotserver   ${snapshot_server_host}
     #${headers}      create dictionary  Content-Type=application/x-www-form-urlencoded      charset=utf-8       content-type=text/html
     ${params}     set variable    Action=CreateSnapshot&Version=1&User=${user}&File=${file}&Name=${snap}
     ${resp}        post request       snapshotserver       /SnapshotCloneService        params=${params}
     delete all sessions
     should be equal as strings     "${resp.status_code}"     "200"

get snapshot info should be true
     create session         snapshotserver   ${snapshot_server_host}
     ${params}     set variable    Action=GetFileSnapshotInfo&Version=1&User=${user}&File=${file}&Limit=0
     ${resp}        get request       snapshotserver       /SnapshotCloneService          params=${params}
     delete all sessions
     should be equal as strings     "${resp.status_code}"     "200"
     log    ${resp.json()}
     log    ${resp.json()[0]}
     should be equal as strings         ${resp.json()[0]["Progress"]}    100
     should be equal as strings          ${resp.json()[0]["Status"]}     0
     should be equal as strings          ${resp.json()[0]["User"]}     ${user}
     should be equal as strings          ${resp.json()[0]["File"]}     ${file}
     set test variable      ${snap_uuid}        ${resp.json()[0]["UUID"]}

delete snapshot
     create session         snapshotserver   ${snapshot_server_host}
     #${headers}      create dictionary  Content-Type=application/x-www-form-urlencoded      charset=utf-8       content-type=text/html
     ${params}     set variable    Action=DeleteSnapshot&Version=1&User=${user}&File=${file}&UUID=${snap_uuid}
     ${resp}        post request       snapshotserver       /SnapshotCloneService          params=${params}
     delete all sessions
     should be equal as strings     "${resp.status_code}"     "200"

workflow base
     start services
     create logicalpool with sleep
	 run libcurve test 		${fake_mds_false} 		${fake_chunkserver_false}

create default file
     start services
     create logicalpool with sleep
     open_libcurve_file

create physical pool should success
	 create physicalpool		${cluster_map}		${mds_port}		${physical_op}

start mds if not started
     ${result}    	check process exsits    mds
	 Run Keyword If		'${result}' != 0    start mds with sleep

check mds should be exsits
	 ${result}	    check process exsits    mds
	 Should Be Equal	'${result}' 		'0'

kill mds
	 kill process 		mds


kill etcd
	 kill process 		etcd


kill one chunkserver
     kill process       chunk

stop snapshot server
     kill process 		snapshotcloneserver

stop etcd server
     kill process 		 etcd



stop snapshot server if started
     ${result}		check process exsits		snapshot
	 Run Keyword If    '${result}' == '0'		stop snapshot server
	 sleep  2
	 check snapshot server should not be exsits

stop chunkserver if started
	 ${result}		check process exsits		chunk
	 Run Keyword If    '${result}' == '0'		stop chunkserver
	 sleep  2
	 check chunkserver should not be exsits

stop mds if started
	 ${result}		check process exsits		mds
	 Run Keyword If    '${result}' == '0'		kill mds
	 sleep  2
	 check mds should not be exsits

stop etcd if started
	 ${result}		check process exsits		etcd
	 Run Keyword If    '${result}' == '0'		kill etcd
	 sleep  2
	 check etcd should not be exsits

check mds should not be exsits
	 ${result}	    check process exsits    mds
	 Should Not Be Equal	'${result}' 		'0'

check snapshot server should not be exsits
	 ${result}	    check process exsits    snapshot
	 Should Not Be Equal	'${result}' 		'0'

check snapshot server should be exsits
	 ${result}	    check process exsits    snapshot
	 Should Be Equal	'${result}' 		'0'

check chunkserver should not be exsits
	 ${result}	    check process exsits    chunk
	 Should Not Be Equal	'${result}' 		'0'

check etcd should not be exsits
	 ${result}	    check process exsits    etcd
	 Should Not Be Equal	'${result}' 		'0'

check etcd should be exsits
	 ${result}	    check process exsits    etcd
	 Should Be Equal	'${result}' 		'0'

check chunkserver should be exsits
	 ${result}	    check process exsits    chunk
	 Should Be Equal	'${result}' 		'0'

start mds with sleep
     start mds
	 Sleep		5s






