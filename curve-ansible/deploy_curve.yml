---
#
#  Copyright (c) 2020 NetEase Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# The deploy playbook of Curve

- name: check_ansible_version
  tags:
    - always
  import_playbook: check_ansible_version.yml

- name: check kernel version
  hosts: chunkservers
  any_errors_fatal: true
  gather_facts: yes
  tags:
    - chunkserver
  tasks:
    - name: check kernel version
      assert:
        that:
          - ansible_kernel|version_compare('3.15', '>=')

- name: prepare software environment on all machines
  hosts: all
  any_errors_fatal: true
  gather_facts: no
  become: yes
  become_user: "{{ sudo_user }}"
  become_flags: -iu {{ sudo_user }}
  tags:
    - always
  roles:
    - { role: prepare_software_env }

############################## deploy etcd ##############################
- name: prepare etcd
  hosts: etcd
  any_errors_fatal: true
  gather_facts: no
  become: yes
  become_user: "{{ sudo_user }}"
  become_flags: -iu {{ sudo_user }}
  tags:
    - etcd
  roles:
    - { role: install_package, package_name: etcd, install_with_deb: false, tags: install_etcd }
    - { role: generate_config, template_name: etcd.conf.yml, conf_path: "{{ etcd_config_path }}", tags: generage_config }

- name: start etcd
  hosts: etcd
  any_errors_fatal: true
  gather_facts: no
  become: yes
  become_user: "{{ sudo_user }}"
  become_flags: -iu {{ sudo_user }}
  tags:
    - etcd
  roles:
    - { role: start_service, service_name: etcd, command_need_sudo: "{{ etcd_need_sudo }}" }


############################## deploy mds ##############################
- name: prepare mds
  hosts: mds
  any_errors_fatal: true
  gather_facts: no
  become: yes
  become_user: "{{ sudo_user }}"
  become_flags: -iu {{ sudo_user }}
  tags:
    - mds
  roles:
    - { role: install_package, package_name: curve-mds, package_version: "{{ mds_package_version }}",
            tags: ["install_package", "install_mds_package"] }
    - { role: install_package, package_name: curve-tools, package_version: "{{ tool_package_version }}",
            tags: ["install_package", "install_tool_package"] }
    - { role: generate_config, template_name: mds.conf, conf_path: "{{ mds_config_path }}",
            tags: ["generate_config", "generage_mds_conf"] }
    - { role: generate_config, template_name: tools.conf, conf_path: "{{ curve_ops_tool_config }}",
            tags: ["generate_config", "generage_tools_conf"] }
    - { role: generate_config, template_name: topo.json, conf_path: "{{ topo_file_path }}",
            tags: ["generate_config", "generage_topo_json"] }
    - { role: generate_config, template_name: snapshot_tools.conf, conf_path: "{{ snap_tool_config_path }}",
            tags: ["generate_config", "generage_snaptool_conf"] }

- name: start mds
  hosts: mds
  any_errors_fatal: true
  gather_facts: no
  become: yes
  become_user: "{{ sudo_user }}"
  become_flags: -iu {{ sudo_user }}
  tags:
    - mds
  roles:
    - { role: start_service, service_name: mds, command_need_sudo: "{{ mds_need_sudo }}" }


############################## create physical pool ##############################

- name: create physical pool
  hosts: mds[0]
  any_errors_fatal: true
  gather_facts: no
  tags:
    - create_physical_pool
  tasks:
    - include_tasks: "common_tasks/create_physical_pool.yml"


############################## deploy chunkserver ##############################
- name: prepare chunkserver
  hosts: chunkservers
  any_errors_fatal: true
  gather_facts: no
  become: yes
  become_user: "{{ sudo_user }}"
  become_flags: -iu {{ sudo_user }}
  tags:
    - chunkserver
  roles:
    - { role: install_package, package_name: curve-chunkserver, package_version: "{{ cs_package_version }}",
            tags: ["install_package", "install_chunkserver_package"] }
    - { role: format_chunkserver, tags: format }
    - { role: generate_config, template_name: chunkserver.conf, conf_path: "{{ chunkserver_conf_path }}",
                tags: ["generate_config", "generage_chunkserver_conf"] }
    - { role: generate_config, template_name: client.conf, conf_path: "{{ chunkserver_client_config_path }}",
                tags: ["generate_config", "generage_chunkserver_conf"] }
    - { role: generate_config, template_name: s3.conf, conf_path: "{{ chunkserver_s3_config_path }}",
                tags: ["generate_config", "generage_s3_conf"] }

- name: start chunkserver
  hosts: chunkservers
  any_errors_fatal: true
  gather_facts: no
  become: yes
  become_user: "{{ sudo_user }}"
  become_flags: -iu {{ sudo_user }}
  tags:
    - chunkserver
  roles:
    - { role: start_service, service_name: chunkserver, command_need_sudo: "{{ chunkserver_need_sudo }}" }


############################## create logical pool ##############################
- name: create logical pool
  hosts: mds[0]
  any_errors_fatal: true
  gather_facts: no
  tags:
    - create_logical_pool
  tasks:
    - include_tasks: "common_tasks/create_logical_pool.yml"


############################## deploy snapshotcloneserver ##############################
- name: prepare snapshotcloneserver
  hosts: snapshotclone
  any_errors_fatal: true
  gather_facts: no
  become: yes
  become_user: "{{ sudo_user }}"
  become_flags: -iu {{ sudo_user }}
  tags:
    - snapshotclone
    - never
  roles:
    - { role: install_package, package_name: curve-snapshotcloneserver, package_version: "{{ snapshot_package_version }}",
            tags: ["install_package", "install_snap_package"] }
    - { role: generate_config, template_name: snapshot_clone_server.conf, conf_path: "{{ snapshot_config_path }}",
            tags: ["generate_config", "generate_snap_conf"] }
    - { role: generate_config, template_name: client.conf, conf_path: "{{ snap_client_config_path }}",
            tags: ["generate_config", "generate_snap_client_conf"] }
    - { role: generate_config, template_name: s3.conf, conf_path: "{{ snap_s3_config_path }}",
                tags: ["generate_config", "generage_s3_conf"] }

- name: start snapshotcloneserver
  hosts: snapshotclone
  any_errors_fatal: true
  gather_facts: no
  become: yes
  become_user: "{{ sudo_user }}"
  become_flags: -iu {{ sudo_user }}
  tags:
    - snapshotclone
    - never
  roles:
    - { role: start_service, service_name: snapshotcloneserver, command_need_sudo: "{{ snapshot_need_sudo }}" }


############################## deploy snapshotcloneserver_nginx ##############################
- name: check docker exist
  hosts: snapshotclone_nginx
  any_errors_fatal: true
  gather_facts: no
  tags:
    - snapshotclone_nginx
    - never
  tasks:
    - include_tasks: common_tasks/check_docker_exists.yml

- name: prepare snapshotcloneserver_nginx
  hosts: snapshotclone_nginx
  any_errors_fatal: true
  gather_facts: no
  become: yes
  become_user: "{{ sudo_user }}"
  become_flags: -iu {{ sudo_user }}
  tags:
    - snapshotclone_nginx
    - never
  roles:
    - { role: install_package, package_name: curve-snapshotcloneserver-nginx,
            tags: ["install_conf_package", "install_snapshotclone_nginx_conf_package"] }
    - { role: generate_config, template_name: nginx.conf, conf_path: "{{ snapshot_nginx_conf_path }}",
            tags: ["generate_config", "generate_snap_nginx_conf"] }
    - { role: generate_config, template_name: nginx_config.lua, conf_path: "{{ snapshot_nginx_lua_conf_path}}",
            tags: ["generate_config", "generate_snap_nginx_lua"] }


- name: start snapshotcloneserver_nginx
  hosts: snapshotclone_nginx
  any_errors_fatal: true
  gather_facts: no
  become: yes
  become_user: "{{ sudo_user }}"
  become_flags: -iu {{ sudo_user }}
  tags:
    - snapshotclone_nginx
    - never
  roles:
    - { role: start_service, service_name: snapshotcloneserver_nginx }
