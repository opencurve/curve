用ansible编写的curve高性能存储系统远程部署升级工具，可以很方便的在一台主控机上做到部署升级集群所有节点。

一、软件依赖
ansible 2.5.9
python 2.7.13

二、使用说明
0、inventory文件说明
inventory文件有client.ini和server.ini，client.ini存放client的机器列表以及对应的变量，server.ini存放除了
client以外的机器，包括etcd，mds，快照克隆，chunkserver等。机器列表格式：
    localhost ansible_ssh_host=127.0.0.1 chunkserver_num=14
其中localhost为机器别名，127.0.0.1为服务所用ip。chunkserver_num是主机变量，inventory中的所有变量都定义成了
组变量，比如
    [chunkservers:vars]
    chunkserver_num=13
表示所有chunkserver机器上的chunkserver数量都是13，但是可能会有个别chunkserver的数量不等于13，这时候在主机
变量中指定一下就可以覆盖组变量中的值，就能够做到特化处理，其他变量同理。

0、配置管理
配置由ansible通过模板的方式统一分发，所有组件的配置项的默认值在roles/generate_config/defaults/main.yml中，如
果不想使用默认值，则在inventory或命令行中额外指定即可。

1、集群升级
目前curve的升级流程为先升级mds，后升级chunkserver，最后升级client。使用ansible需要指定一台主控机，我们规定
主控机为mds节点之一。ansible-playbook同时需要yml文件和inventory文件，yml文件规定了要做哪些操作，inventory
指定了机器列表并定义了一些变量。yml文件在curve仓库的curve-ansible目录中，inventory每个环境一份，由用户自行
管理。

所有rolling_update的脚本都支持通过指定tag选择只升级包和配置或只重启服务。比如对于mds来说：
  (1) 如果想只更新包，不重启，命令为：
      ansible-playbook rolling_update_mds.yml -i server.ini --tags update_config_and_pkg
  (2) 如果只想重启服务，不想更新包，命令为：
      ansible-playbook rolling_update_mds.yml -i server.ini --tags restart

1.1 升级mds
mds升级需要先升级备，再升级主，这个逻辑在yml文件中已经包含了，使用的时候只需要交互确认一下即可。
  (1) ansible-playbook rolling_update_mds.yml -i server.ini
  (2) 此时会打出"Confirm restart mds in pubt1-curve1. ENTER to continue or CTRL-C A to quit:"，确认无误
      （确认第一个是备）后输入回车继续
  (3) 重复上一步直到所有mds升级完毕

1.2 重启etcd
etcd的版本很少会更新，但是配置和etcd-daemon可能会更新，这时需要重启一下etcd，因此需要一个重启etcd的功能。
etcd的重启同样需要需要先升级follower，再升级leader，这个逻辑在yml文件中已经包含了，使用的时候只需要交互确认一下即可。
  (1) ansible-playbook restart_etcd.yml -i server.ini
  (2) 此时会打出"Confirm restart etcd in pubt1-curve1. ENTER to continue or CTRL-C A to quit:"，确认无误
      （确认第一个是备）后输入回车继续
  (3) 重复上一步直到所有etcd重启完毕


1.3 升级快照克隆
快照克隆升级需要先升级备，再升级主，这个逻辑在yml文件中已经包含了，使用的时候只需要交互确认一下即可。
  (1) ansible-playbook rolling_update_snapshotclone.yml -i server.ini
  (2) 此时会打出"Confirm restart snapshotclone in pubt1-curve1. ENTER to continue or CTRL-C A to quit:"
      确认无误（确认第一个是备）后输入回车继续
  (3) 重复上一步直到所有快照克隆升级完毕

1.4 升级chunkserver
  (1) ansible-playbook rolling_update_chunkserver.yml -i server.ini
  (2) 此时会打出"Confirm restart chunkserver in pubt1-curve1. ENTER to continue or CTRL-C A to quit:"
      确认无误（集群healthy，io恢复）后输入回车继续
  (3) 重复上一步直到所有chunkserver升级完毕

1.5 升级nebd-server
  (1) ansible-playbook rolling_update_nebd.yml -i client.ini
  (2) 升级nebd-server也有类似的确认步骤，由于机器比较多，可以选择指定 --extra-vars "need_confirm=false"来关掉
      确认这一步

1.6 升级curve-sdk
curve-sdk主要给cinder，nova等服务使用，只需要更新包和配置即可，不需要重启服务
  (1) ansible-playbook rolling_update_curve_sdk.yml -i client.ini

2、集群回退
升级过程中，可能会因为一些问题导致升级失败，这时候会有回退的需求。回退是一个危险操作，因为老版本不一定能够兼容新版本，
所以要谨慎回退。回退的时候只回退软件版本，不回退配置文件，所以要保证配置文件是向前兼容的（即只增加字段，不删除字段）。
回退和升级共享一个yml文件，区别仅在与软件版本不同，所以额外在命令行中指定版本即可。

2.1 回退mds
mds回退同样需要先重启备，再重启主，这个逻辑在yml文件中已经包含了，使用的时候只需要交互确认一下即可。
  (1) ansible-playbook rolling_update_mds.yml -i server.ini --extra-vars \
          "mds_package_version=0.0.5.3+4b11a64d tool_package_version=0.0.5.3+4b11a64d \
           need_update_config=false"
  (2) 此时会打出"Confirm restart mds in pubt1-curve1. ENTER to continue or CTRL-C A to quit:"，确认无误
      （确认第一个是备）后输入回车继续
  (3) 重复上一步直到所有mds回退完毕

2.2 回退快照克隆
快照克隆回退需要先重启备，再重启主，这个逻辑在yml文件中已经包含了，使用的时候只需要交互确认一下即可。
  (1) ansible-playbook rolling_update_snapshotclone.yml -i server.ini --extra-vars /
              "snap_package_version=0.0.6.1+160be351 need_update_config=false"
  (2) 此时会打出"Confirm restart snapshotclone in pubt1-curve1. ENTER to continue or CTRL-C A to quit:"
      确认无误（确认第一个是备）后输入回车继续
  (3) 重复上一步直到所有快照克隆回滚完毕

2.3 回退chunkserver
  (1) ansible-playbook rolling_update_mds.yml -i server.ini --extra-vars \
          "cs_package_version=0.0.5.3+4b11a64d need_update_config=false"
  (2) 此时会打出"Confirm restart chunkserver in pubt1-curve1. ENTER to continue or CTRL-C A to quit:"
      确认无误（集群healthy，io恢复）后输入回车继续
  (3) 重复上一步直到所有chunkserver回退完毕

2.4 回退nebd-server
  (1) ansible-playbook rolling_update_nebd.yml -i client.ini --extra-vars \
        "nebd_package_version=1.0.1+5e87f36 need_update_config=false"
  (2) 升级nebd-server也有类似的确认步骤，由于机器比较多，可以选择指定 --extra-vars "need_confirm=false"来关掉
      确认这一步

2.5 回退curve-sdk
curve-sdk主要给cinder，nova等服务使用，只需要更新包和配置即可，不需要重启服务
  (1) ansible-playbook rolling_update_curve_sdk.yml -i client.ini --extra-vars \
          "sdk_package_version=0.0.5.3+4b11a64d need_update_config=false"

3、检查哨兵配置
curve线上报警统一由哨兵完成。在部署或升级完一个环境的时候，往往需要配置或修改监控项和报警规则，由于配置是人工完成的，
所以有一定概率有遗漏之类的，所以提供了检查哨兵配置的check_nss命令。哨兵上的监控项和报警规则以集群为单位配置，所以检
查哨兵配置应该有两步，第一步是检查inventory里面列出的机器确实都在集群里，这一步可以通过CMDB的getServersByCluster
接口配合遍历inventory中的主机来完成。第二步是检查集群的监控项和报警规则，通过哨兵的getMonitorItemsByCluster和get
AlarmRuleList两个接口查询后和本地的group_vars中定义的监控项和报警规则比较。
group_vars/all.yml中定义了需要的全部监控项和报警项，理论上这些变量和版本有关，和具体的环境关系不大。

(1) 检查mds
ansible-playbook check_nss_mds.yml -i server.ini
(2) 检查快照克隆
ansible-playbook check_nss_snapshotclone.yml -i server.ini
(3) 检查etcd
ansible-playbook check_nss_etcd.yml -i server.ini
(4) 检查chunkserver
ansible-playbook check_nss_chunkserver.yml -i server.ini
(5) 检查client
ansible-playbook check_nss_client.yml -i client.ini

三、目录结构说明
.
├── common_tasks                                            # 放置可以复用的代码（可以理解为各种函数）
│   ├── check_chunkserver.yml                               # 检查chunkserver机器配置
│   ├── check_cluster_healthy_status.yml                    # 检查集群健康状态
│   ├── check_mds.yml                                       # 检查mds机器配置
│   ├── get_curve_version_from_metric.yml                   # 从metric获取curve版本
│   ├── get_nebd_version_from_metric.yml                    # 从metric获取nebd版本
│   ├── get_software_version_from_package_version.yml       # 从包版本获取软件版本
│   ├── update_package.yml                                  # 更新包
│   └── wait_copysets_status_healthy.yml                    # 在一段时间内循环检查copyset健康状态
├── roles                                                   # roles也是用来存放可以复用的代码，一个role内的task存在关联
│   ├── check_nss                                           # 检查哨兵监控的role
│   │   ├── defaults
│   │   │   └── main.yml                                    # 用来存放有默认值的变量，优先级最低，可以在inventory或命令行覆盖
│   │   ├── tasks                                           # 用来存放task，main.yml是入口，其他的被main引用
│   │   │   ├── include
│   │   │   │   ├── check_if_member_in_list.yml             # 检查一个字符串是否在一个列表中
│   │   │   │   ├── generate_signature.yml                  # 生成发送API所需的签名
│   │   │   │   ├── get_all_host_in_nss_cluster.yml         # 获取哨兵cluster中的所有机器的hostname
│   │   │   │   ├── get_cluster_alarm_rules_from_nss.yml    # 从哨兵获取集群的全部报警规则
│   │   │   │   └── get_cluster_monitor_items_from_nss.yml  # 从哨兵获取集群的全部监控项
│   │   │   └── main.yml                                    # main.yml的所有task会被include到使用role的地方
│   │   └── vars
│   │       └── main.yml
│   ├── restart_service                                     # 用来重启服务的role
│   │   ├── tasks                                           # 存放重启服务的task，main.yml是入口，其他的被main引用
│   │   │   ├── include
│   │   │   │   ├── restart_by_daemon.yml                   # 用daemon重启服务
│   │   │   │   ├── restart_chunkserver.yml                 # 重启chunkserver
│   │   │   │   ├── restart_etcd.yml                        # 重启etcd
│   │   │   │   ├── restart_mds.yml                         # 重启etcd
│   │   │   │   ├── restart_nebd.yml                        # 重启nebd server
│   │   │   │   ├── restart_one_chunkserver.yml             # 重启单个chunkserver
│   │   │   │   └── restart_snapshotclone.yml               # 重启快照克隆
│   │   │   └── main.yml                                    # main.yml的所有task会被include到使用role的地方
│   │   └── vars
│   │       └── main.yml                                    # main.yml的所有变量会被包含到使用role的地方
│   ├── set_leader_and_follower_list                        # 设置leader和follower列表
│   │   ├── tasks                                           # 存放task，main.yml是入口，其他的被main引用
│   │   │   ├── include
│   │   │   │   ├── get_all_ip.yml                          # 获取节点的全部ip
│   │   │   │   ├── get_etcd_leader_ip.yml                  # 获取etcd leader的ip
│   │   │   │   ├── get_mds_leader_ip.yml                   # 获取mds leader的ip
│   │   │   │   └── get_snapshot_leader_ip.yml              # 获取快照克隆leader的ip
│   │   │   └── main.yml                                    # main.yml的所有task会被include到使用role的地方
│   │   └── vars
│   │       └── main.yml                                    # main.yml的所有变量会被包含到使用role的地方
│   └── generate_config                                       # 更新配置文件的role
│       ├── defaults
│       │   └── main.yml                                    # 存放有默认值的变量
│       ├── tasks
│       │   └── main.yml                                    # main.yml的所有task会被include到使用role的地方
│       ├── templates                                       # 用于存放role中用到的jinjia模板
│       │   ├── chunkserver.conf.j2                         # chunkserver配置文件的模板
│       │   ├── client.conf.j2                              # client配置文件的模板
│       │   ├── mds.conf.j2                                 # mds配置文件的模板
│       │   ├── nebd-client.conf.j2                         # nebd client配置文件的模板
│       │   ├── nebd-server.conf.j2                         # nebd server配置文件的模板
│       │   ├── s3.conf.j2                                  # s3配置文件的模板
│       │   ├── snapshot_clone_server.conf.j2               # 快照克隆配置文件的模板
│       │   ├── snapshot_tools.conf.j2                      # 快照工具配置文件的模板
│       │   └── tools.conf.j2                               # curve_ops_tool配置文件的模板
│       └── vars
│           └── main.yml                                    # main.yml的所有变量会被包含到使用role的地方
├── rolling_update_chunkserver.yml                          # 升级chunkserver
├── rolling_update_mds.yml                                  # 升级mds
├── rolling_update_nebd.yml                                 # 升级nebd-server
├── rolling_update_curve_sdk.yml                            # 升级curve sdk
├── rolling_update_snapshotclone.yml                        # 升级快照克隆
├── restart_etcd.yml                                        # 重启etcd的命令
├── check_chunkserver.yml                                   # 检查chunkserver所在机器配置
├── check_mds.yml                                           # 检查mds所在机器配置
├── check_nss_chunkserver.yml                               # 检查chunkserver哨兵监控
├── check_nss_client.yml                                    # 检查client哨兵监控
├── check_nss_etcd.yml                                      # 检查etcd哨兵监控
├── check_nss_mds.yml                                       # 检查mds哨兵监控
├── check_nss_snapshotclone.yml                             # 检查快照克隆哨兵监控
├── README                                                  # 本帮助文档
├── client.ini                                              # client的inventory文件
└── server.ini                                              # server的列表，包括mds，快照克隆，etcd，chunkserver
