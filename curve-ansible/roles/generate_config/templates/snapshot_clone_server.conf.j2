#
# curvefs client options
#
# Client configuration file location
client.config_path={{ snap_client_config_path }}
# Mds root username
mds.rootUser={{ curve_root_username }}
# Mds root password
mds.rootPassword={{ curve_root_password }}
# The total retry time for calling the client method
client.methodRetryTimeSec={{ snap_client_method_retry_time_sec }}
# Call client method retry interval
client.methodRetryIntervalMs={{ snap_client_method_retry_interval_ms }}

# Log file location
log.dir={{ snap_log_dir }}

#
# S3 config path
#
s3.config_path={{ snap_s3_config_path }}
#
#server options
#
# for snapshot
server.address={{ ansible_ssh_host }}:{{ snapshot_port }}
server.subnet={{ snapshot_subnet }}
server.port={{ snapshot_port }}
# Total retry time for calling client asynchronous methods
server.clientAsyncMethodRetryTimeSec={{ snap_client_async_method_retry_time_sec }}
# Call client asynchronous method retry interval
server.clientAsyncMethodRetryIntervalMs={{ snap_client_async_method_retry_interval_ms }}
# Number of snapshot worker threads
server.snapshotPoolThreadNum={{ snap_snapshot_pool_thread_num }}
# Scanning cycle of snapshot background thread scanning waiting queue and work queue (unit: ms)
server.snapshotTaskManagerScanIntervalMs={{ snap_snapshot_task_manager_scan_interval_ms }}
# Dump chunk shard size
server.chunkSplitSize={{ snap_chunk_split_size }}
# CheckSnapShotStatus call interval
server.checkSnapshotStatusIntervalMs={{ snap_check_snapshot_status_interval_ms }}
# Maximum Snapshots
server.maxSnapshotLimit={{ snap_max_snapshot_limit }}
# Number of threads simultaneously executing dump
server.snapshotCoreThreadNum={{ snap_snapshot_core_thread_num }}
# Mds session time
server.mdsSessionTimeUs={{ file_expired_time_us }}
# Number of snapshot shards per thread that simultaneously perform ReadChunkSnapshots and dumps
server.readChunkSnapshotConcurrency={{ snap_read_chunk_snapshot_concurrency }}

# for clone
# Number of thread pool threads used for Lazy clone metadata section
server.stage1PoolThreadNum={{ snap_stage1_pool_thread_num }}
# Number of thread pool threads used for Lazy clone data section
server.stage2PoolThreadNum={{ snap_stage2_pool_thread_num }}
# Number of thread pool threads used for requests for non Lazy clones and deletion of clones and other control surfaces
server.commonPoolThreadNum={{ snap_common_pool_thread_num }}
# CloneTaskManager backend thread scan interval
server.cloneTaskManagerScanIntervalMs={{ snap_clone_task_manager_scan_interval_ms }}
# Clone chunk shard size
server.cloneChunkSplitSize={{ snap_clone_chunk_split_size }}
# Clone temporary directory
server.cloneTempDir={{ snap_clone_temp_dir }}
# Number of asynchronous requests made simultaneously by CreateCloneChunk
server.createCloneChunkConcurrency={{ snap_create_clone_chunk_concurrency }}
# Number of asynchronous requests simultaneously made by RecoverChunk
server.recoverChunkConcurrency={{ snap_recover_chunk_concurrency }}
# CloneServiceManager reference counting background scan every record interval
server.backEndReferenceRecordScanIntervalMs={{ snap_clone_backend_ref_record_scan_interval_ms }}
# CloneServiceManager Reference Count Background Scan Every Record Interval
server.backEndReferenceFuncScanIntervalMs={{ snap_clone_backend_ref_func_scan_interval_ms }}

#
# ETCD related configurations
#
# ETCD address
{% set etcd_address=[] -%}
{% for host in groups.etcd -%}
  {% set etcd_ip = hostvars[host].ansible_ssh_host -%}
  {% set etcd_port = hostvars[host].etcd_listen_client_port -%}
  {% set _ = etcd_address.append("%s:%s" % (etcd_ip, etcd_port)) -%}
{% endfor -%}

etcd.endpoint={{ etcd_address | join(',') }}
# The timeout period for establishing a connection with a client
etcd.dailtimeoutMs={{ snap_etcd_dailtimeout_ms }}
# The timeout period for client to perform put/get/txn and other operations
etcd.operation.timeoutMs={{ snap_etcd_operation_timeout_ms }}
# The number of times a client operation failed and can be retried
etcd.retry.times={{ snap_etcd_retry_times }}
# wait dlock timeout
etcd.dlock.timeoutMs={{ snap_etcd_dlock_timeout_ms }}
# dlock lease timeout
etcd.dlock.ttlSec={{ snap_etcd_dlock_ttl_sec }}

#
# Leader election related parameters
#
# Leader lock name
leader.campagin.prefix={{ snap_leader_campagin_prefix }}
# During the leader election, a session is created in seconds (the unit of the value for the interface of the go code is s)
# This value is related to the ETCD cluster selection timeout
# The server side of ETCD limits this value to a minimum of 1.5 * election timeout
# Suggest setting the ETCD cluster selection timeout to 1 second
leader.session.intersec={{ snap_leader_session_inter_sec }}
# The timeout period for the leader election. If it is 0 and the election is unsuccessful, it will continue to block. If it is greater than 0, it will be in the selectionTimeoutMs time
# If a leader is not selected, an error will be returned
leader.election.timeoutms={{ snap_leader_election_timeout_ms }}

#
# Dummyserver related configurations
#
server.dummy.listen.port={{ snapshot_dummy_port }}
