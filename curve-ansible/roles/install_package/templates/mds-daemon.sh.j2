#!/bin/bash

#curve-mds path
curveBin={{ curve_bin_dir }}/curve-mds

#Default configuration file
confPath={{ mds_config_path }}

#Log file path
logPath={{ mds_log_dir }}

# mdsAddr
mdsAddr=

# pidfile
pidFile=${HOME}/curve-mds.pid

# daemon log
daemonLog=${logPath}/curve-mds-daemon.log

# console output
consoleLog=${logPath}/curve-mds-console.log

function ip_value() {
  echo $1 | awk -F '[:/.]' '{
    mask = (2 ^ 8)
    printf ("%.0f", (($1 * mask + $2) * mask + $3) * mask + $4)
  }'
}

#Start mds
function start_mds() {
  #Check the daemon
  if ! type daemon &> /dev/null
  then
    echo "No daemon installed"
    exit 1
  fi

  #Check curve mds
  if [ ! -f ${curveBin} ]
  then
    echo "No curve-mds installed"
    exit 1
  fi

  #Check configuration file
  if [ ! -f ${confPath} ]
  then
    echo "Not found mds.conf, Path is ${confPath}"
    exit 1
  fi

  #Determine if curve mds has been started through daemon
  daemon --name curve-mds --pidfile ${pidFile} --running
  if [ $? -eq 0 ]
  then
    echo "Already started curve-mds by daemon"
    exit
  fi

  #Create logPath
  mkdir -p ${logPath} > /dev/null 2>&1
  if [ $? -ne 0 ]
  then
    echo "Create mds log dir failed: ${logPath}"
    exit 1
  fi

  #Check if logPath has write permission
  if [ ! -w ${logPath} ]
  then
    echo "Write permission denied: ${logPath}"
    exit 1
  fi

  #Check if consoleLog is writable or can be created
  touch ${consoleLog} > /dev/null 2>&1
  if [ $? -ne 0 ]
  then
    echo "Can't Write or Create console Log: ${consoleLog}"
    exit 1
  fi

  #Check if the daemonLog is writable or can be created
  touch ${daemonLog} > /dev/null 2>&1
  if [ $? -ne 0 ]
  then
    echo "Can't Write or Create daemon logfile: ${daemonLog}"
    exit 1
  fi

  #No mdsAddr specified, resolving network segment from configuration file
  if [ -z ${mdsAddr} ]
  then
        subnet=`cat $confPath|grep global.subnet|awk -F"=" '{print $2}'`
        port=`cat $confPath|grep global.port|awk -F"=" '{print $2}'`
        prefix=$(ip_value $subnet)
        mod=`echo $subnet|awk -F/ '{print $2}'`
        mask=$((2**32-2**(32-$mod)))
        ip=
        echo "subnet: $subnet"
        echo "port: $port"
        #Take the module again for the prefix to support the format 10.182.26.50/22
        prefix=$(($prefix&$mask))
        for i in `/sbin/ifconfig -a|grep inet|grep -v inet6|awk '{print $2}'|tr -d "addr:"`
        do
                #Convert IP to an integer
                ip_int=$(ip_value $i)
                if [ $(($ip_int&$mask)) -eq $prefix ]
                then
                    ip=$i
                    break
                fi
        done
        if [ -z "$ip" ]
        then
                echo "no ip matched!\n"
                return 1
        fi
        mdsAddr=${ip}:${port}
  fi

  daemon --name curve-mds --core --inherit \
    --respawn --attempts 100 --delay 10 \
    --pidfile ${pidFile} \
    --errlog ${daemonLog} \
    --output ${consoleLog} \
    -- ${curveBin} -confPath=${confPath} -mdsAddr=${mdsAddr} -log_dir=${logPath} -graceful_quit_on_sigterm=true -stderrthreshold=3

  sleep 1
  show_status
}

#Stop the daemon process and stop the curve mds
function stop_mds() {
  #Determine if curve mds has been started through daemon
  daemon --name curve-mds --pidfile ${pidFile} --running
  if [ $? -ne 0 ]
  then
    echo "Didn't start curve-mds by daemon"
    exit 0
  fi

  daemon --name curve-mds --pidfile ${pidFile} --stop
  if [ $? -ne 0 ]
  then
    echo "stop may not success!"
  else
    echo "curve-mds exit success!"
    echo "daemon exit success!"
  fi
}

# restart
function restart_mds() {
  #Determine if curve mds has been started through daemon
  daemon --name curve-mds --pidfile ${pidFile} --running
  if [ $? -ne 0 ]
  then
    echo "Didn't start curve-mds by daemon"
    exit 1
  fi

  daemon --name curve-mds --pidfile ${pidFile} --restart
  if [ $? -ne 0 ]
  then
    echo "Restart failed"
  fi
}

# show status
function show_status() {
  #Determine if curve mds has been started through daemon
  daemon --name curve-mds --pidfile ${pidFile} --running
  if [ $? -ne 0 ]
  then
    echo "Didn't start curve-mds by daemon"
    exit 1
  fi

  #Query the IP of the leader
  leaderAddr=`tac ${consoleLog}|grep -a -m 1 -B 1000000 "Logging before InitGoogleLogging()"|grep "leader"|grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"|head -n1`

  #If there are no leader related logs in the logs after load mds configuration
  #So leaderAddr is empty, and mds should not be up
  if [ -z ${leaderAddr} ]
  then
    echo "MDS may not start successfully, check log"
    exit 1
  fi

  if [ ${leaderAddr} = "127.0.0.1" ]
  then
    echo "Current MDS is LEADER"
  else
    #Check if it is equal to its own IP address
    for ip in `(hostname -I)`
    do
      if [ ${leaderAddr} = ${ip} ]
      then
        echo "Current MDS is LEADER"
        exit
      fi
    done

    echo "Current MDS is FOLLOWER, LEADER is ${leaderAddr}"
  fi
}

#Usage
function usage() {
  echo "Usage:"
  echo "  ./mds-daemon.sh start -- start deamon process and watch on curve-mds process"
  echo "    [-c|--confPath path]    mds conf path"
  echo "    [-l|--logPath  path]    mds log path"
  echo "    [-a|--mdsAddr  ip:port]   mds address"
  echo "  ./mds-daemon.sh stop  -- stop daemon process and curve-mds"
  echo "  ./mds-daemon.sh restart -- restart curve-mds"
  echo "  ./mds-daemon.sh status -- show mds status [LEADER/STATUS]"
  echo "Examples:"
  echo "  ./mds-daemon.sh start -c /etc/curve/mds.conf -l ${HOME}/ -a 127.0.0.1:6666"
}

#Check parameter startup parameters, at least 1
if [ $# -lt 1 ]
then
  usage
  exit
fi

case $1 in
"start")
  shift # pass first argument

  #Parsing parameters
  while [[ $# -gt 1 ]]
  do
    key=$1

    case $key in
    -c|--confPath)
      confPath=`realpath $2`
      shift # pass key
      shift # pass value
      ;;
    -a|--mdsAddr)
      mdsAddr=$2
      shift # pass key
      shift # pass value
      ;;
    -l|--logPath)
      logPath=`realpath $2`
      shift # pass key
      shift # pass value
      ;;
    *)
      usage
      exit
      ;;
    esac
  done

  start_mds
  ;;
"stop")
  stop_mds
  ;;
"restart")
  restart_mds
  ;;
"status")
  show_status
  ;;
*)
  usage
  ;;
esac
