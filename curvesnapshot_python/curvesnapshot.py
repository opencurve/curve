#
#  Copyright (c) 2020 NetEase Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_curvesnapshot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_curvesnapshot')
    _curvesnapshot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_curvesnapshot', [dirname(__file__)])
        except ImportError:
            import _curvesnapshot
            return _curvesnapshot
        try:
            _mod = imp.load_module('_curvesnapshot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _curvesnapshot = swig_import_helper()
    del swig_import_helper
else:
    import _curvesnapshot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _curvesnapshot.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _curvesnapshot.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _curvesnapshot.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _curvesnapshot.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _curvesnapshot.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _curvesnapshot.SwigPyIterator_equal(self, x)

    def copy(self):
        return _curvesnapshot.SwigPyIterator_copy(self)

    def next(self):
        return _curvesnapshot.SwigPyIterator_next(self)

    def __next__(self):
        return _curvesnapshot.SwigPyIterator___next__(self)

    def previous(self):
        return _curvesnapshot.SwigPyIterator_previous(self)

    def advance(self, n):
        return _curvesnapshot.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _curvesnapshot.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _curvesnapshot.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _curvesnapshot.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _curvesnapshot.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _curvesnapshot.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _curvesnapshot.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _curvesnapshot.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class type_uInt32_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, type_uInt32_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, type_uInt32_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _curvesnapshot.type_uInt32_t_value_set
    __swig_getmethods__["value"] = _curvesnapshot.type_uInt32_t_value_get
    if _newclass:
        value = _swig_property(_curvesnapshot.type_uInt32_t_value_get, _curvesnapshot.type_uInt32_t_value_set)

    def __init__(self):
        this = _curvesnapshot.new_type_uInt32_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _curvesnapshot.delete_type_uInt32_t
    __del__ = lambda self: None
type_uInt32_t_swigregister = _curvesnapshot.type_uInt32_t_swigregister
type_uInt32_t_swigregister(type_uInt32_t)

class type_uInt64_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, type_uInt64_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, type_uInt64_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _curvesnapshot.type_uInt64_t_value_set
    __swig_getmethods__["value"] = _curvesnapshot.type_uInt64_t_value_get
    if _newclass:
        value = _swig_property(_curvesnapshot.type_uInt64_t_value_get, _curvesnapshot.type_uInt64_t_value_set)

    def __init__(self):
        this = _curvesnapshot.new_type_uInt64_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _curvesnapshot.delete_type_uInt64_t
    __del__ = lambda self: None
type_uInt64_t_swigregister = _curvesnapshot.type_uInt64_t_swigregister
type_uInt64_t_swigregister(type_uInt64_t)

class CUserInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUserInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CUserInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["owner"] = _curvesnapshot.CUserInfo_t_owner_set
    __swig_getmethods__["owner"] = _curvesnapshot.CUserInfo_t_owner_get
    if _newclass:
        owner = _swig_property(_curvesnapshot.CUserInfo_t_owner_get, _curvesnapshot.CUserInfo_t_owner_set)
    __swig_setmethods__["password"] = _curvesnapshot.CUserInfo_t_password_set
    __swig_getmethods__["password"] = _curvesnapshot.CUserInfo_t_password_get
    if _newclass:
        password = _swig_property(_curvesnapshot.CUserInfo_t_password_get, _curvesnapshot.CUserInfo_t_password_set)

    def __init__(self):
        this = _curvesnapshot.new_CUserInfo_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _curvesnapshot.delete_CUserInfo_t
    __del__ = lambda self: None
CUserInfo_t_swigregister = _curvesnapshot.CUserInfo_t_swigregister
CUserInfo_t_swigregister(CUserInfo_t)

class FileInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _curvesnapshot.FileInfo_t_id_set
    __swig_getmethods__["id"] = _curvesnapshot.FileInfo_t_id_get
    if _newclass:
        id = _swig_property(_curvesnapshot.FileInfo_t_id_get, _curvesnapshot.FileInfo_t_id_set)
    __swig_setmethods__["parentid"] = _curvesnapshot.FileInfo_t_parentid_set
    __swig_getmethods__["parentid"] = _curvesnapshot.FileInfo_t_parentid_get
    if _newclass:
        parentid = _swig_property(_curvesnapshot.FileInfo_t_parentid_get, _curvesnapshot.FileInfo_t_parentid_set)
    __swig_setmethods__["filetype"] = _curvesnapshot.FileInfo_t_filetype_set
    __swig_getmethods__["filetype"] = _curvesnapshot.FileInfo_t_filetype_get
    if _newclass:
        filetype = _swig_property(_curvesnapshot.FileInfo_t_filetype_get, _curvesnapshot.FileInfo_t_filetype_set)
    __swig_setmethods__["length"] = _curvesnapshot.FileInfo_t_length_set
    __swig_getmethods__["length"] = _curvesnapshot.FileInfo_t_length_get
    if _newclass:
        length = _swig_property(_curvesnapshot.FileInfo_t_length_get, _curvesnapshot.FileInfo_t_length_set)
    __swig_setmethods__["ctime"] = _curvesnapshot.FileInfo_t_ctime_set
    __swig_getmethods__["ctime"] = _curvesnapshot.FileInfo_t_ctime_get
    if _newclass:
        ctime = _swig_property(_curvesnapshot.FileInfo_t_ctime_get, _curvesnapshot.FileInfo_t_ctime_set)

    def __init__(self):
        this = _curvesnapshot.new_FileInfo_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _curvesnapshot.delete_FileInfo_t
    __del__ = lambda self: None
FileInfo_t_swigregister = _curvesnapshot.FileInfo_t_swigregister
FileInfo_t_swigregister(FileInfo_t)

Created = _curvesnapshot.Created
Deleting = _curvesnapshot.Deleting
Cloning = _curvesnapshot.Cloning
CloneMetaInstalled = _curvesnapshot.CloneMetaInstalled
Cloned = _curvesnapshot.Cloned
INODE_DIRECTORY_C = _curvesnapshot.INODE_DIRECTORY_C
INODE_PAGEFILE_C = _curvesnapshot.INODE_PAGEFILE_C
INODE_APPENDFILE_C = _curvesnapshot.INODE_APPENDFILE_C
INODE_APPENDECFILE_C = _curvesnapshot.INODE_APPENDECFILE_C
class CChunkIDInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkIDInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkIDInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cid_"] = _curvesnapshot.CChunkIDInfo_t_cid__set
    __swig_getmethods__["cid_"] = _curvesnapshot.CChunkIDInfo_t_cid__get
    if _newclass:
        cid_ = _swig_property(_curvesnapshot.CChunkIDInfo_t_cid__get, _curvesnapshot.CChunkIDInfo_t_cid__set)
    __swig_setmethods__["cpid_"] = _curvesnapshot.CChunkIDInfo_t_cpid__set
    __swig_getmethods__["cpid_"] = _curvesnapshot.CChunkIDInfo_t_cpid__get
    if _newclass:
        cpid_ = _swig_property(_curvesnapshot.CChunkIDInfo_t_cpid__get, _curvesnapshot.CChunkIDInfo_t_cpid__set)
    __swig_setmethods__["lpid_"] = _curvesnapshot.CChunkIDInfo_t_lpid__set
    __swig_getmethods__["lpid_"] = _curvesnapshot.CChunkIDInfo_t_lpid__get
    if _newclass:
        lpid_ = _swig_property(_curvesnapshot.CChunkIDInfo_t_lpid__get, _curvesnapshot.CChunkIDInfo_t_lpid__set)

    def __init__(self):
        this = _curvesnapshot.new_CChunkIDInfo_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _curvesnapshot.delete_CChunkIDInfo_t
    __del__ = lambda self: None
CChunkIDInfo_t_swigregister = _curvesnapshot.CChunkIDInfo_t_swigregister
CChunkIDInfo_t_swigregister(CChunkIDInfo_t)

class CChunkInfoDetail_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CChunkInfoDetail_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CChunkInfoDetail_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["snSize"] = _curvesnapshot.CChunkInfoDetail_t_snSize_set
    __swig_getmethods__["snSize"] = _curvesnapshot.CChunkInfoDetail_t_snSize_get
    if _newclass:
        snSize = _swig_property(_curvesnapshot.CChunkInfoDetail_t_snSize_get, _curvesnapshot.CChunkInfoDetail_t_snSize_set)
    __swig_setmethods__["chunkSn"] = _curvesnapshot.CChunkInfoDetail_t_chunkSn_set
    __swig_getmethods__["chunkSn"] = _curvesnapshot.CChunkInfoDetail_t_chunkSn_get
    if _newclass:
        chunkSn = _swig_property(_curvesnapshot.CChunkInfoDetail_t_chunkSn_get, _curvesnapshot.CChunkInfoDetail_t_chunkSn_set)

    def __init__(self):
        this = _curvesnapshot.new_CChunkInfoDetail_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _curvesnapshot.delete_CChunkInfoDetail_t
    __del__ = lambda self: None
CChunkInfoDetail_t_swigregister = _curvesnapshot.CChunkInfoDetail_t_swigregister
CChunkInfoDetail_t_swigregister(CChunkInfoDetail_t)

class LogicalPoolCopysetIDInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogicalPoolCopysetIDInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogicalPoolCopysetIDInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lpid"] = _curvesnapshot.LogicalPoolCopysetIDInfo_t_lpid_set
    __swig_getmethods__["lpid"] = _curvesnapshot.LogicalPoolCopysetIDInfo_t_lpid_get
    if _newclass:
        lpid = _swig_property(_curvesnapshot.LogicalPoolCopysetIDInfo_t_lpid_get, _curvesnapshot.LogicalPoolCopysetIDInfo_t_lpid_set)
    __swig_setmethods__["cpidVecSize"] = _curvesnapshot.LogicalPoolCopysetIDInfo_t_cpidVecSize_set
    __swig_getmethods__["cpidVecSize"] = _curvesnapshot.LogicalPoolCopysetIDInfo_t_cpidVecSize_get
    if _newclass:
        cpidVecSize = _swig_property(_curvesnapshot.LogicalPoolCopysetIDInfo_t_cpidVecSize_get, _curvesnapshot.LogicalPoolCopysetIDInfo_t_cpidVecSize_set)
    __swig_setmethods__["cpidVec"] = _curvesnapshot.LogicalPoolCopysetIDInfo_t_cpidVec_set
    __swig_getmethods__["cpidVec"] = _curvesnapshot.LogicalPoolCopysetIDInfo_t_cpidVec_get
    if _newclass:
        cpidVec = _swig_property(_curvesnapshot.LogicalPoolCopysetIDInfo_t_cpidVec_get, _curvesnapshot.LogicalPoolCopysetIDInfo_t_cpidVec_set)

    def __init__(self):
        this = _curvesnapshot.new_LogicalPoolCopysetIDInfo_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _curvesnapshot.delete_LogicalPoolCopysetIDInfo_t
    __del__ = lambda self: None
LogicalPoolCopysetIDInfo_t_swigregister = _curvesnapshot.LogicalPoolCopysetIDInfo_t_swigregister
LogicalPoolCopysetIDInfo_t_swigregister(LogicalPoolCopysetIDInfo_t)

class CSegmentInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSegmentInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSegmentInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segmentsize"] = _curvesnapshot.CSegmentInfo_t_segmentsize_set
    __swig_getmethods__["segmentsize"] = _curvesnapshot.CSegmentInfo_t_segmentsize_get
    if _newclass:
        segmentsize = _swig_property(_curvesnapshot.CSegmentInfo_t_segmentsize_get, _curvesnapshot.CSegmentInfo_t_segmentsize_set)
    __swig_setmethods__["chunksize"] = _curvesnapshot.CSegmentInfo_t_chunksize_set
    __swig_getmethods__["chunksize"] = _curvesnapshot.CSegmentInfo_t_chunksize_get
    if _newclass:
        chunksize = _swig_property(_curvesnapshot.CSegmentInfo_t_chunksize_get, _curvesnapshot.CSegmentInfo_t_chunksize_set)
    __swig_setmethods__["startoffset"] = _curvesnapshot.CSegmentInfo_t_startoffset_set
    __swig_getmethods__["startoffset"] = _curvesnapshot.CSegmentInfo_t_startoffset_get
    if _newclass:
        startoffset = _swig_property(_curvesnapshot.CSegmentInfo_t_startoffset_get, _curvesnapshot.CSegmentInfo_t_startoffset_set)
    __swig_setmethods__["chunkVecSize"] = _curvesnapshot.CSegmentInfo_t_chunkVecSize_set
    __swig_getmethods__["chunkVecSize"] = _curvesnapshot.CSegmentInfo_t_chunkVecSize_get
    if _newclass:
        chunkVecSize = _swig_property(_curvesnapshot.CSegmentInfo_t_chunkVecSize_get, _curvesnapshot.CSegmentInfo_t_chunkVecSize_set)
    __swig_setmethods__["chunkvec"] = _curvesnapshot.CSegmentInfo_t_chunkvec_set
    __swig_getmethods__["chunkvec"] = _curvesnapshot.CSegmentInfo_t_chunkvec_get
    if _newclass:
        chunkvec = _swig_property(_curvesnapshot.CSegmentInfo_t_chunkvec_get, _curvesnapshot.CSegmentInfo_t_chunkvec_set)
    __swig_setmethods__["lpcpIDInfo"] = _curvesnapshot.CSegmentInfo_t_lpcpIDInfo_set
    __swig_getmethods__["lpcpIDInfo"] = _curvesnapshot.CSegmentInfo_t_lpcpIDInfo_get
    if _newclass:
        lpcpIDInfo = _swig_property(_curvesnapshot.CSegmentInfo_t_lpcpIDInfo_get, _curvesnapshot.CSegmentInfo_t_lpcpIDInfo_set)

    def __init__(self):
        this = _curvesnapshot.new_CSegmentInfo_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _curvesnapshot.delete_CSegmentInfo_t
    __del__ = lambda self: None
CSegmentInfo_t_swigregister = _curvesnapshot.CSegmentInfo_t_swigregister
CSegmentInfo_t_swigregister(CSegmentInfo_t)

class CFInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _curvesnapshot.CFInfo_t_id_set
    __swig_getmethods__["id"] = _curvesnapshot.CFInfo_t_id_get
    if _newclass:
        id = _swig_property(_curvesnapshot.CFInfo_t_id_get, _curvesnapshot.CFInfo_t_id_set)
    __swig_setmethods__["parentid"] = _curvesnapshot.CFInfo_t_parentid_set
    __swig_getmethods__["parentid"] = _curvesnapshot.CFInfo_t_parentid_get
    if _newclass:
        parentid = _swig_property(_curvesnapshot.CFInfo_t_parentid_get, _curvesnapshot.CFInfo_t_parentid_set)
    __swig_setmethods__["filetype"] = _curvesnapshot.CFInfo_t_filetype_set
    __swig_getmethods__["filetype"] = _curvesnapshot.CFInfo_t_filetype_get
    if _newclass:
        filetype = _swig_property(_curvesnapshot.CFInfo_t_filetype_get, _curvesnapshot.CFInfo_t_filetype_set)
    __swig_setmethods__["chunksize"] = _curvesnapshot.CFInfo_t_chunksize_set
    __swig_getmethods__["chunksize"] = _curvesnapshot.CFInfo_t_chunksize_get
    if _newclass:
        chunksize = _swig_property(_curvesnapshot.CFInfo_t_chunksize_get, _curvesnapshot.CFInfo_t_chunksize_set)
    __swig_setmethods__["segmentsize"] = _curvesnapshot.CFInfo_t_segmentsize_set
    __swig_getmethods__["segmentsize"] = _curvesnapshot.CFInfo_t_segmentsize_get
    if _newclass:
        segmentsize = _swig_property(_curvesnapshot.CFInfo_t_segmentsize_get, _curvesnapshot.CFInfo_t_segmentsize_set)
    __swig_setmethods__["length"] = _curvesnapshot.CFInfo_t_length_set
    __swig_getmethods__["length"] = _curvesnapshot.CFInfo_t_length_get
    if _newclass:
        length = _swig_property(_curvesnapshot.CFInfo_t_length_get, _curvesnapshot.CFInfo_t_length_set)
    __swig_setmethods__["ctime"] = _curvesnapshot.CFInfo_t_ctime_set
    __swig_getmethods__["ctime"] = _curvesnapshot.CFInfo_t_ctime_get
    if _newclass:
        ctime = _swig_property(_curvesnapshot.CFInfo_t_ctime_get, _curvesnapshot.CFInfo_t_ctime_set)
    __swig_setmethods__["seqnum"] = _curvesnapshot.CFInfo_t_seqnum_set
    __swig_getmethods__["seqnum"] = _curvesnapshot.CFInfo_t_seqnum_get
    if _newclass:
        seqnum = _swig_property(_curvesnapshot.CFInfo_t_seqnum_get, _curvesnapshot.CFInfo_t_seqnum_set)
    __swig_setmethods__["owner"] = _curvesnapshot.CFInfo_t_owner_set
    __swig_getmethods__["owner"] = _curvesnapshot.CFInfo_t_owner_get
    if _newclass:
        owner = _swig_property(_curvesnapshot.CFInfo_t_owner_get, _curvesnapshot.CFInfo_t_owner_set)
    __swig_setmethods__["filename"] = _curvesnapshot.CFInfo_t_filename_set
    __swig_getmethods__["filename"] = _curvesnapshot.CFInfo_t_filename_get
    if _newclass:
        filename = _swig_property(_curvesnapshot.CFInfo_t_filename_get, _curvesnapshot.CFInfo_t_filename_set)
    __swig_setmethods__["filestatus"] = _curvesnapshot.CFInfo_t_filestatus_set
    __swig_getmethods__["filestatus"] = _curvesnapshot.CFInfo_t_filestatus_get
    if _newclass:
        filestatus = _swig_property(_curvesnapshot.CFInfo_t_filestatus_get, _curvesnapshot.CFInfo_t_filestatus_set)

    def __init__(self):
        this = _curvesnapshot.new_CFInfo_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _curvesnapshot.delete_CFInfo_t
    __del__ = lambda self: None
CFInfo_t_swigregister = _curvesnapshot.CFInfo_t_swigregister
CFInfo_t_swigregister(CFInfo_t)


def Init(path):
    return _curvesnapshot.Init(path)
Init = _curvesnapshot.Init

def CreateSnapShot(filename, userinfo, seq):
    return _curvesnapshot.CreateSnapShot(filename, userinfo, seq)
CreateSnapShot = _curvesnapshot.CreateSnapShot

def DeleteSnapShot(filename, userinfo, seq):
    return _curvesnapshot.DeleteSnapShot(filename, userinfo, seq)
DeleteSnapShot = _curvesnapshot.DeleteSnapShot

def GetSnapShot(fname, userinfo, seq, snapinfo):
    return _curvesnapshot.GetSnapShot(fname, userinfo, seq, snapinfo)
GetSnapShot = _curvesnapshot.GetSnapShot

def GetSnapshotSegmentInfo(filename, userinfo, seq, offset, segInfo):
    return _curvesnapshot.GetSnapshotSegmentInfo(filename, userinfo, seq, offset, segInfo)
GetSnapshotSegmentInfo = _curvesnapshot.GetSnapshotSegmentInfo

def ReadChunkSnapshot(cidinfo, seq, offset, len, buf):
    return _curvesnapshot.ReadChunkSnapshot(cidinfo, seq, offset, len, buf)
ReadChunkSnapshot = _curvesnapshot.ReadChunkSnapshot

def DeleteChunkSnapshotOrCorrectSn(cidinfo, correctedSeq):
    return _curvesnapshot.DeleteChunkSnapshotOrCorrectSn(cidinfo, correctedSeq)
DeleteChunkSnapshotOrCorrectSn = _curvesnapshot.DeleteChunkSnapshotOrCorrectSn

def GetChunkInfo(cidinfo, chunkInfo):
    return _curvesnapshot.GetChunkInfo(cidinfo, chunkInfo)
GetChunkInfo = _curvesnapshot.GetChunkInfo

def CheckSnapShotStatus(filename, userinfo, seq, filestatus):
    return _curvesnapshot.CheckSnapShotStatus(filename, userinfo, seq, filestatus)
CheckSnapShotStatus = _curvesnapshot.CheckSnapShotStatus

def GetOrAllocateSegmentInfo(filename, offset, segmentsize, chunksize, userinfo, segInfo):
    return _curvesnapshot.GetOrAllocateSegmentInfo(filename, offset, segmentsize, chunksize, userinfo, segInfo)
GetOrAllocateSegmentInfo = _curvesnapshot.GetOrAllocateSegmentInfo

def CreateCloneChunk(location, chunkidinfo, sn, correntSn, chunkSize):
    return _curvesnapshot.CreateCloneChunk(location, chunkidinfo, sn, correntSn, chunkSize)
CreateCloneChunk = _curvesnapshot.CreateCloneChunk

def RecoverChunk(chunkidinfo, offset, len):
    return _curvesnapshot.RecoverChunk(chunkidinfo, offset, len)
RecoverChunk = _curvesnapshot.RecoverChunk

def UnInit():
    return _curvesnapshot.UnInit()
UnInit = _curvesnapshot.UnInit
class CCIDinfoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCIDinfoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCIDinfoVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _curvesnapshot.CCIDinfoVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _curvesnapshot.CCIDinfoVector___nonzero__(self)

    def __bool__(self):
        return _curvesnapshot.CCIDinfoVector___bool__(self)

    def __len__(self):
        return _curvesnapshot.CCIDinfoVector___len__(self)

    def __getslice__(self, i, j):
        return _curvesnapshot.CCIDinfoVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _curvesnapshot.CCIDinfoVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _curvesnapshot.CCIDinfoVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _curvesnapshot.CCIDinfoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _curvesnapshot.CCIDinfoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _curvesnapshot.CCIDinfoVector___setitem__(self, *args)

    def pop(self):
        return _curvesnapshot.CCIDinfoVector_pop(self)

    def append(self, x):
        return _curvesnapshot.CCIDinfoVector_append(self, x)

    def empty(self):
        return _curvesnapshot.CCIDinfoVector_empty(self)

    def size(self):
        return _curvesnapshot.CCIDinfoVector_size(self)

    def swap(self, v):
        return _curvesnapshot.CCIDinfoVector_swap(self, v)

    def begin(self):
        return _curvesnapshot.CCIDinfoVector_begin(self)

    def end(self):
        return _curvesnapshot.CCIDinfoVector_end(self)

    def rbegin(self):
        return _curvesnapshot.CCIDinfoVector_rbegin(self)

    def rend(self):
        return _curvesnapshot.CCIDinfoVector_rend(self)

    def clear(self):
        return _curvesnapshot.CCIDinfoVector_clear(self)

    def get_allocator(self):
        return _curvesnapshot.CCIDinfoVector_get_allocator(self)

    def pop_back(self):
        return _curvesnapshot.CCIDinfoVector_pop_back(self)

    def erase(self, *args):
        return _curvesnapshot.CCIDinfoVector_erase(self, *args)

    def __init__(self, *args):
        this = _curvesnapshot.new_CCIDinfoVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _curvesnapshot.CCIDinfoVector_push_back(self, x)

    def front(self):
        return _curvesnapshot.CCIDinfoVector_front(self)

    def back(self):
        return _curvesnapshot.CCIDinfoVector_back(self)

    def assign(self, n, x):
        return _curvesnapshot.CCIDinfoVector_assign(self, n, x)

    def resize(self, *args):
        return _curvesnapshot.CCIDinfoVector_resize(self, *args)

    def insert(self, *args):
        return _curvesnapshot.CCIDinfoVector_insert(self, *args)

    def reserve(self, n):
        return _curvesnapshot.CCIDinfoVector_reserve(self, n)

    def capacity(self):
        return _curvesnapshot.CCIDinfoVector_capacity(self)
    __swig_destroy__ = _curvesnapshot.delete_CCIDinfoVector
    __del__ = lambda self: None
CCIDinfoVector_swigregister = _curvesnapshot.CCIDinfoVector_swigregister
CCIDinfoVector_swigregister(CCIDinfoVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _curvesnapshot.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _curvesnapshot.IntVector___nonzero__(self)

    def __bool__(self):
        return _curvesnapshot.IntVector___bool__(self)

    def __len__(self):
        return _curvesnapshot.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _curvesnapshot.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _curvesnapshot.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _curvesnapshot.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _curvesnapshot.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _curvesnapshot.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _curvesnapshot.IntVector___setitem__(self, *args)

    def pop(self):
        return _curvesnapshot.IntVector_pop(self)

    def append(self, x):
        return _curvesnapshot.IntVector_append(self, x)

    def empty(self):
        return _curvesnapshot.IntVector_empty(self)

    def size(self):
        return _curvesnapshot.IntVector_size(self)

    def swap(self, v):
        return _curvesnapshot.IntVector_swap(self, v)

    def begin(self):
        return _curvesnapshot.IntVector_begin(self)

    def end(self):
        return _curvesnapshot.IntVector_end(self)

    def rbegin(self):
        return _curvesnapshot.IntVector_rbegin(self)

    def rend(self):
        return _curvesnapshot.IntVector_rend(self)

    def clear(self):
        return _curvesnapshot.IntVector_clear(self)

    def get_allocator(self):
        return _curvesnapshot.IntVector_get_allocator(self)

    def pop_back(self):
        return _curvesnapshot.IntVector_pop_back(self)

    def erase(self, *args):
        return _curvesnapshot.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _curvesnapshot.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _curvesnapshot.IntVector_push_back(self, x)

    def front(self):
        return _curvesnapshot.IntVector_front(self)

    def back(self):
        return _curvesnapshot.IntVector_back(self)

    def assign(self, n, x):
        return _curvesnapshot.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _curvesnapshot.IntVector_resize(self, *args)

    def insert(self, *args):
        return _curvesnapshot.IntVector_insert(self, *args)

    def reserve(self, n):
        return _curvesnapshot.IntVector_reserve(self, n)

    def capacity(self):
        return _curvesnapshot.IntVector_capacity(self)
    __swig_destroy__ = _curvesnapshot.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _curvesnapshot.IntVector_swigregister
IntVector_swigregister(IntVector)

# This file is compatible with both classic and new-style classes.


